// Generated by @wagmi/cli@0.1.11 on 3/14/2023 at 4:40:55â€¯PM
import {
  useContract,
  UseContractConfig, useContractEvent,
  UseContractEventConfig, useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig
} from 'wagmi'
import {
  PrepareWriteContractResult, ReadContractResult,
  WriteContractMode
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AssetManagers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const assetManagersABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AssetTransfersHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const assetTransfersHandlerABI = [
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Authentication
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const authenticationABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BalancerPoolToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const balancerPoolTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'vault', internalType: 'contract IVault', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basePoolABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RecoveryModeStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'swapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SwapFeePercentageChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'disableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'enableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getScalingFactors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inRecoveryMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onExitPool',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onJoinPool',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryExit',
    outputs: [
      { name: 'bptIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryJoin',
    outputs: [
      { name: 'bptOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'swapFeePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSwapFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasePoolAuthorization
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basePoolAuthorizationABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasePoolUserData
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basePoolUserDataABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RECOVERY_MODE_EXIT_KIND',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EOASignaturesValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eoaSignaturesValidatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExtraCalldataEOASignaturesValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const extraCalldataEoaSignaturesValidatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fees
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const feesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FlashLoans
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const flashLoansABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAuthentication
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAuthenticationABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAuthorizer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAuthorizerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'actionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
    ],
    name: 'canPerform',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBasePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBasePoolABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getScalingFactors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onExitPool',
    outputs: [
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onJoinPool',
    outputs: [
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryExit',
    outputs: [
      { name: 'bptIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryJoin',
    outputs: [
      { name: 'bptOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IControlledPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iControlledPoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'swapFeePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSwapFeePercentage',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlashLoanRecipient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlashLoanRecipientABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'feeAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'receiveFlashLoan',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGeneralPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGeneralPoolABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getScalingFactors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onExitPool',
    outputs: [
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onJoinPool',
    outputs: [
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swapRequest',
        internalType: 'struct IPoolSwapStructs.SwapRequest',
        type: 'tuple',
        components: [
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'tokenIn', internalType: 'contract IERC20', type: 'address' },
          {
            name: 'tokenOut',
            internalType: 'contract IERC20',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'indexIn', internalType: 'uint256', type: 'uint256' },
      { name: 'indexOut', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'onSwap',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryExit',
    outputs: [
      { name: 'bptIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryJoin',
    outputs: [
      { name: 'bptOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMinimalSwapInfoPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMinimalSwapInfoPoolABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getScalingFactors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onExitPool',
    outputs: [
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onJoinPool',
    outputs: [
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'dueProtocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'swapRequest',
        internalType: 'struct IPoolSwapStructs.SwapRequest',
        type: 'tuple',
        components: [
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'tokenIn', internalType: 'contract IERC20', type: 'address' },
          {
            name: 'tokenOut',
            internalType: 'contract IERC20',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'currentBalanceTokenIn',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'currentBalanceTokenOut',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'onSwap',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryExit',
    outputs: [
      { name: 'bptIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryJoin',
    outputs: [
      { name: 'bptOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProtocolFeesCollector
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProtocolFeesCollectorABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFlashLoanFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoanFeePercentageChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SwapFeePercentageChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getCollectedFeeAmounts',
    outputs: [
      { name: 'feeAmounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFlashLoanFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newFlashLoanFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setFlashLoanFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setSwapFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'withdrawCollectedFees',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRecoveryMode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRecoveryModeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RecoveryModeStateChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'disableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'enableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inRecoveryMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISignaturesValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSignaturesValidatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITemporarilyPausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTemporarilyPausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWETH
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iwethABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVaultABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MinimalSwapInfoPoolsBalance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const minimalSwapInfoPoolsBalanceABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockBasePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockBasePoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'vault', internalType: 'contract IVault', type: 'address' },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
      { name: 'swapFeePercentage', internalType: 'uint256', type: 'uint256' },
      { name: 'pauseWindowDuration', internalType: 'uint256', type: 'uint256' },
      {
        name: 'bufferPeriodDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InnerOnExitPoolCalled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InnerOnJoinPoolCalled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'totalSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'balances',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'bptAmountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RecoveryModeExit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RecoveryModeStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'swapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SwapFeePercentageChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'disableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'doNotCallInRecovery',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'enableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMiscData',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getScalingFactors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inRecoveryMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'notCallableInRecovery',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onExitPool',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onJoinPool',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'onlyCallableInRecovery',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bptAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'payProtocolFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryExit',
    outputs: [
      { name: 'bptIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsOut', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      {
        name: 'protocolSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'queryJoin',
    outputs: [
      { name: 'bptOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountsIn', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'fail', internalType: 'bool', type: 'bool' }],
    name: 'setFailBeforeSwapJoinExit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
    name: 'setMiscData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'swapFeePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSwapFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoolBalances
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolBalancesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPoolMetadataRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPoolMetadataRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'metadataCID',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'PoolMetadataUpdated',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoolMetadataRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolMetadataRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'vault', internalType: 'contract IVault', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'metadataCID',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'PoolMetadataUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: '_isPoolOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'poolIdMetadataCIDMap',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'metadataCID', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolMetadata',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoolRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoolTokens
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolTokensABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProtocolFeesCollector
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const protocolFeesCollectorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_vault', internalType: 'contract IVault', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFlashLoanFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoanFeePercentageChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SwapFeePercentageChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getCollectedFeeAmounts',
    outputs: [
      { name: 'feeAmounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFlashLoanFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSwapFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newFlashLoanFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setFlashLoanFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newSwapFeePercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setSwapFeePercentage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'withdrawCollectedFees',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RecoveryMode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const recoveryModeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RecoveryModeStateChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'disableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'enableRecoveryMode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inRecoveryMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Swaps
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const swapsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [
      { name: 'amountCalculated', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableConstants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableConstantsABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_BUFFER_PERIOD_DURATION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_PAUSE_WINDOW_DURATION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TemporarilyPausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const temporarilyPausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TwoTokenPoolsBalance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const twoTokenPoolsBalanceABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UserBalance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const userBalanceABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'authorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
      { name: 'weth', internalType: 'contract IWETH', type: 'address' },
      { name: 'pauseWindowDuration', internalType: 'uint256', type: 'uint256' },
      {
        name: 'bufferPeriodDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [
      { name: 'amountCalculated', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VaultAuthorization
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultAuthorizationABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalBalanceTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlashLoan',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      { name: 'delta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'InternalBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'PausedStateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidityProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'deltas',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
      {
        name: 'protocolFeeAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'PoolBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'assetManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cashDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'managedDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'PoolBalanceManaged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'poolAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PoolRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'RelayerApprovalChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokenIn',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenOut',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountIn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountOut',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'tokens',
        internalType: 'contract IERC20[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'assetManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'TokensRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WETH',
    outputs: [{ name: '', internalType: 'contract IWETH', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limits', internalType: 'int256[]', type: 'int256[]' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchSwap',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'deregisterTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.ExitPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'minAmountsOut',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'exitPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'recipient',
        internalType: 'contract IFlashLoanRecipient',
        type: 'address',
      },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flashLoan',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'getActionId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuthorizer',
    outputs: [
      { name: '', internalType: 'contract IAuthorizer', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
    ],
    name: 'getInternalBalance',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNextNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPausedState',
    outputs: [
      { name: 'paused', internalType: 'bool', type: 'bool' },
      { name: 'pauseWindowEndTime', internalType: 'uint256', type: 'uint256' },
      { name: 'bufferPeriodEndTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPool',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      {
        name: '',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getPoolTokenInfo',
    outputs: [
      { name: 'cash', internalType: 'uint256', type: 'uint256' },
      { name: 'managed', internalType: 'uint256', type: 'uint256' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'assetManager', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getPoolTokens',
    outputs: [
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'balances', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'lastChangeBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProtocolFeesCollector',
    outputs: [
      {
        name: '',
        internalType: 'contract IProtocolFeesCollector',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
    ],
    name: 'hasApprovedRelayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      {
        name: 'request',
        internalType: 'struct IVault.JoinPoolRequest',
        type: 'tuple',
        components: [
          {
            name: 'assets',
            internalType: 'contract IAsset[]',
            type: 'address[]',
          },
          {
            name: 'maxAmountsIn',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'joinPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.PoolBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.PoolBalanceOpKind',
            type: 'uint8',
          },
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'managePoolBalance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct IVault.UserBalanceOp[]',
        type: 'tuple[]',
        components: [
          {
            name: 'kind',
            internalType: 'enum IVault.UserBalanceOpKind',
            type: 'uint8',
          },
          { name: 'asset', internalType: 'contract IAsset', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
        ],
      },
    ],
    name: 'manageUserBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
      {
        name: 'swaps',
        internalType: 'struct IVault.BatchSwapStep[]',
        type: 'tuple[]',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'assetInIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'assetOutIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'assets', internalType: 'contract IAsset[]', type: 'address[]' },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'queryBatchSwap',
    outputs: [
      { name: 'assetDeltas', internalType: 'int256[]', type: 'int256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'specialization',
        internalType: 'enum IVault.PoolSpecialization',
        type: 'uint8',
      },
    ],
    name: 'registerPool',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'tokens', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'assetManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'registerTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newAuthorizer',
        internalType: 'contract IAuthorizer',
        type: 'address',
      },
    ],
    name: 'setAuthorizer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paused', internalType: 'bool', type: 'bool' }],
    name: 'setPaused',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'relayer', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRelayerApproval',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'singleSwap',
        internalType: 'struct IVault.SingleSwap',
        type: 'tuple',
        components: [
          { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'kind', internalType: 'enum IVault.SwapKind', type: 'uint8' },
          { name: 'assetIn', internalType: 'contract IAsset', type: 'address' },
          {
            name: 'assetOut',
            internalType: 'contract IAsset',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'funds',
        internalType: 'struct IVault.FundManagement',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'fromInternalBalance', internalType: 'bool', type: 'bool' },
          {
            name: 'recipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'toInternalBalance', internalType: 'bool', type: 'bool' },
        ],
      },
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link assetManagersABI}__.
 */
export function useAssetManagers(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: assetManagersABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__.
 */
export function useAssetManagersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof assetManagersABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof assetManagersABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"WETH"`.
 */
export function useAssetManagersWeth<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof assetManagersABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof assetManagersABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getActionId"`.
 */
export function useAssetManagersGetActionId<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof assetManagersABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useAssetManagersGetAuthorizer<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useAssetManagersGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof assetManagersABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useAssetManagersGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof assetManagersABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useAssetManagersGetNextNonce<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof assetManagersABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useAssetManagersGetPausedState<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getPool"`.
 */
export function useAssetManagersGetPool<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof assetManagersABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof assetManagersABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useAssetManagersGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useAssetManagersGetPoolTokens<
  TSelectData = ReadContractResult<typeof assetManagersABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getPoolTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useAssetManagersGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof assetManagersABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useAssetManagersHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof assetManagersABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof assetManagersABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: assetManagersABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof assetManagersABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__.
 */
export function useAssetManagersWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof assetManagersABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, TFunctionName>({
    abi: assetManagersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useAssetManagersBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'batchSwap'>({
    abi: assetManagersABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useAssetManagersDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'deregisterTokens'>({
    abi: assetManagersABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"exitPool"`.
 */
export function useAssetManagersExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'exitPool'>({
    abi: assetManagersABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useAssetManagersFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'flashLoan'>({
    abi: assetManagersABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"joinPool"`.
 */
export function useAssetManagersJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'joinPool'>({
    abi: assetManagersABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useAssetManagersManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'managePoolBalance'>({
    abi: assetManagersABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useAssetManagersManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'manageUserBalance'>({
    abi: assetManagersABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useAssetManagersQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'queryBatchSwap'>({
    abi: assetManagersABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"registerPool"`.
 */
export function useAssetManagersRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'registerPool'>({
    abi: assetManagersABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useAssetManagersRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'registerTokens'>({
    abi: assetManagersABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useAssetManagersSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'setAuthorizer'
      > & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'setAuthorizer'>({
    abi: assetManagersABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setPaused"`.
 */
export function useAssetManagersSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'setPaused'>({
    abi: assetManagersABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useAssetManagersSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof assetManagersABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof assetManagersABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'setRelayerApproval'>(
    {
      abi: assetManagersABI,
      functionName: 'setRelayerApproval',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"swap"`.
 */
export function useAssetManagersSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof assetManagersABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof assetManagersABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof assetManagersABI, 'swap'>({
    abi: assetManagersABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__.
 */
export function usePrepareAssetManagersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareAssetManagersBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareAssetManagersDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof assetManagersABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareAssetManagersExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareAssetManagersFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareAssetManagersJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareAssetManagersManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof assetManagersABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareAssetManagersManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof assetManagersABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareAssetManagersQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareAssetManagersRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareAssetManagersRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareAssetManagersSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareAssetManagersSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareAssetManagersSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof assetManagersABI,
      'setRelayerApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof assetManagersABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link assetManagersABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareAssetManagersSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof assetManagersABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: assetManagersABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof assetManagersABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__.
 */
export function useAssetManagersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useAssetManagersAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useAssetManagersExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof assetManagersABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useAssetManagersFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useAssetManagersInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof assetManagersABI,
    'InternalBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useAssetManagersPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useAssetManagersPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useAssetManagersPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useAssetManagersPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useAssetManagersRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<
    typeof assetManagersABI,
    'RelayerApprovalChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"Swap"`.
 */
export function useAssetManagersSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useAssetManagersTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link assetManagersABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useAssetManagersTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof assetManagersABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: assetManagersABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof assetManagersABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link assetTransfersHandlerABI}__.
 */
export function useAssetTransfersHandler(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: assetTransfersHandlerABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link authenticationABI}__.
 */
export function useAuthentication(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: authenticationABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link authenticationABI}__.
 */
export function useAuthenticationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof authenticationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof authenticationABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: authenticationABI,
    ...config,
  } as UseContractReadConfig<
    typeof authenticationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link authenticationABI}__ and `functionName` set to `"getActionId"`.
 */
export function useAuthenticationGetActionId<
  TSelectData = ReadContractResult<typeof authenticationABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof authenticationABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: authenticationABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof authenticationABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link balancerPoolTokenABI}__.
 */
export function useBalancerPoolToken(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: balancerPoolTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__.
 */
export function useBalancerPoolTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBalancerPoolTokenDomainSeparator<
  TSelectData = ReadContractResult<
    typeof balancerPoolTokenABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBalancerPoolTokenAllowance<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBalancerPoolTokenBalanceOf<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBalancerPoolTokenDecimals<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof balancerPoolTokenABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useBalancerPoolTokenGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof balancerPoolTokenABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useBalancerPoolTokenGetNextNonce<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"getVault"`.
 */
export function useBalancerPoolTokenGetVault<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'getVault'>,
>(
  config: Omit<
    UseContractReadConfig<typeof balancerPoolTokenABI, 'getVault', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'getVault',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'getVault',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBalancerPoolTokenName<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof balancerPoolTokenABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof balancerPoolTokenABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useBalancerPoolTokenNonces<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof balancerPoolTokenABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBalancerPoolTokenSymbol<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof balancerPoolTokenABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBalancerPoolTokenTotalSupply<
  TSelectData = ReadContractResult<typeof balancerPoolTokenABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof balancerPoolTokenABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: balancerPoolTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof balancerPoolTokenABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__.
 */
export function useBalancerPoolTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof balancerPoolTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof balancerPoolTokenABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof balancerPoolTokenABI, TFunctionName>({
    abi: balancerPoolTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBalancerPoolTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof balancerPoolTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof balancerPoolTokenABI, 'approve'>({
    abi: balancerPoolTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBalancerPoolTokenDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof balancerPoolTokenABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof balancerPoolTokenABI,
    'decreaseAllowance'
  >({
    abi: balancerPoolTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBalancerPoolTokenIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof balancerPoolTokenABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof balancerPoolTokenABI,
    'increaseAllowance'
  >({
    abi: balancerPoolTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useBalancerPoolTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof balancerPoolTokenABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof balancerPoolTokenABI, 'permit'>({
    abi: balancerPoolTokenABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBalancerPoolTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof balancerPoolTokenABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof balancerPoolTokenABI, 'transfer'>({
    abi: balancerPoolTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBalancerPoolTokenTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof balancerPoolTokenABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof balancerPoolTokenABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof balancerPoolTokenABI, 'transferFrom'>({
    abi: balancerPoolTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__.
 */
export function usePrepareBalancerPoolTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof balancerPoolTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBalancerPoolTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBalancerPoolTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof balancerPoolTokenABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof balancerPoolTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBalancerPoolTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof balancerPoolTokenABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof balancerPoolTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareBalancerPoolTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBalancerPoolTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBalancerPoolTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof balancerPoolTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: balancerPoolTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof balancerPoolTokenABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link balancerPoolTokenABI}__.
 */
export function useBalancerPoolTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof balancerPoolTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: balancerPoolTokenABI,
    ...config,
  } as UseContractEventConfig<typeof balancerPoolTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBalancerPoolTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof balancerPoolTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: balancerPoolTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof balancerPoolTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link balancerPoolTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBalancerPoolTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof balancerPoolTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: balancerPoolTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof balancerPoolTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basePoolABI}__.
 */
export function useBasePool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basePoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__.
 */
export function useBasePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBasePoolDomainSeparator<
  TSelectData = ReadContractResult<typeof basePoolABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"allowance"`.
 */
export function useBasePoolAllowance<
  TSelectData = ReadContractResult<typeof basePoolABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBasePoolBalanceOf<
  TSelectData = ReadContractResult<typeof basePoolABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"decimals"`.
 */
export function useBasePoolDecimals<
  TSelectData = ReadContractResult<typeof basePoolABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getActionId"`.
 */
export function useBasePoolGetActionId<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useBasePoolGetAuthorizer<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getAuthorizer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useBasePoolGetDomainSeparator<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useBasePoolGetNextNonce<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBasePoolGetOwner<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useBasePoolGetPausedState<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getPausedState', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useBasePoolGetPoolId<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getPoolId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getPoolId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getPoolId',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getPoolId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useBasePoolGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof basePoolABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getScalingFactors"`.
 */
export function useBasePoolGetScalingFactors<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getScalingFactors'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getScalingFactors', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getScalingFactors',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolABI,
    'getScalingFactors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useBasePoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getSwapFeePercentage'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"getVault"`.
 */
export function useBasePoolGetVault<
  TSelectData = ReadContractResult<typeof basePoolABI, 'getVault'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'getVault', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'getVault',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'getVault', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"inRecoveryMode"`.
 */
export function useBasePoolInRecoveryMode<
  TSelectData = ReadContractResult<typeof basePoolABI, 'inRecoveryMode'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'inRecoveryMode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'inRecoveryMode',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'inRecoveryMode', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"name"`.
 */
export function useBasePoolName<
  TSelectData = ReadContractResult<typeof basePoolABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"nonces"`.
 */
export function useBasePoolNonces<
  TSelectData = ReadContractResult<typeof basePoolABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"symbol"`.
 */
export function useBasePoolSymbol<
  TSelectData = ReadContractResult<typeof basePoolABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBasePoolTotalSupply<
  TSelectData = ReadContractResult<typeof basePoolABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePoolABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof basePoolABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__.
 */
export function useBasePoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof basePoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, TFunctionName>({
    abi: basePoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"approve"`.
 */
export function useBasePoolApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'approve'>({
    abi: basePoolABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBasePoolDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basePoolABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'decreaseAllowance'>({
    abi: basePoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function useBasePoolDisableRecoveryMode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basePoolABI,
          'disableRecoveryMode'
        >['abi'],
        'disableRecoveryMode'
      > & { functionName?: 'disableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof basePoolABI,
        'disableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'disableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'disableRecoveryMode'>({
    abi: basePoolABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function useBasePoolEnableRecoveryMode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basePoolABI,
          'enableRecoveryMode'
        >['abi'],
        'enableRecoveryMode'
      > & { functionName?: 'enableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof basePoolABI,
        'enableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'enableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'enableRecoveryMode'>({
    abi: basePoolABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBasePoolIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basePoolABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'increaseAllowance'>({
    abi: basePoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function useBasePoolOnExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'onExitPool'>['abi'],
        'onExitPool'
      > & { functionName?: 'onExitPool' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'onExitPool'> & {
        abi?: never
        functionName?: 'onExitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'onExitPool'>({
    abi: basePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function useBasePoolOnJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'onJoinPool'>['abi'],
        'onJoinPool'
      > & { functionName?: 'onJoinPool' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'onJoinPool'> & {
        abi?: never
        functionName?: 'onJoinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'onJoinPool'>({
    abi: basePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"pause"`.
 */
export function useBasePoolPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'pause'>({
    abi: basePoolABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"permit"`.
 */
export function useBasePoolPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'permit'>({
    abi: basePoolABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function useBasePoolQueryExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'queryExit'>['abi'],
        'queryExit'
      > & { functionName?: 'queryExit' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'queryExit'> & {
        abi?: never
        functionName?: 'queryExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'queryExit'>({
    abi: basePoolABI,
    functionName: 'queryExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function useBasePoolQueryJoin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'queryJoin'>['abi'],
        'queryJoin'
      > & { functionName?: 'queryJoin' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'queryJoin'> & {
        abi?: never
        functionName?: 'queryJoin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'queryJoin'>({
    abi: basePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useBasePoolSetSwapFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basePoolABI,
          'setSwapFeePercentage'
        >['abi'],
        'setSwapFeePercentage'
      > & { functionName?: 'setSwapFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof basePoolABI,
        'setSwapFeePercentage'
      > & {
        abi?: never
        functionName?: 'setSwapFeePercentage'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'setSwapFeePercentage'>({
    abi: basePoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"transfer"`.
 */
export function useBasePoolTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'transfer'>({
    abi: basePoolABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBasePoolTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'transferFrom'>({
    abi: basePoolABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"unpause"`.
 */
export function useBasePoolUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basePoolABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof basePoolABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basePoolABI, 'unpause'>({
    abi: basePoolABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__.
 */
export function usePrepareBasePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBasePoolApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBasePoolDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function usePrepareBasePoolDisableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'disableRecoveryMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'disableRecoveryMode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function usePrepareBasePoolEnableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'enableRecoveryMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'enableRecoveryMode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBasePoolIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function usePrepareBasePoolOnExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'onExitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'onExitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function usePrepareBasePoolOnJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'onJoinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'onJoinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareBasePoolPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareBasePoolPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function usePrepareBasePoolQueryExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'queryExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'queryExit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'queryExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function usePrepareBasePoolQueryJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'queryJoin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'queryJoin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareBasePoolSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'setSwapFeePercentage'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePoolABI,
    'setSwapFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBasePoolTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBasePoolTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePoolABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareBasePoolUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePoolABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePoolABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePoolABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__.
 */
export function useBasePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__ and `eventName` set to `"Approval"`.
 */
export function useBasePoolApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useBasePoolPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__ and `eventName` set to `"RecoveryModeStateChanged"`.
 */
export function useBasePoolRecoveryModeStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, 'RecoveryModeStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    eventName: 'RecoveryModeStateChanged',
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, 'RecoveryModeStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__ and `eventName` set to `"SwapFeePercentageChanged"`.
 */
export function useBasePoolSwapFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, 'SwapFeePercentageChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    eventName: 'SwapFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, 'SwapFeePercentageChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePoolABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBasePoolTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof basePoolABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePoolABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof basePoolABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basePoolAuthorizationABI}__.
 */
export function useBasePoolAuthorization(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basePoolAuthorizationABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolAuthorizationABI}__.
 */
export function useBasePoolAuthorizationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof basePoolAuthorizationABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolAuthorizationABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolAuthorizationABI,
    ...config,
  } as UseContractReadConfig<
    typeof basePoolAuthorizationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolAuthorizationABI}__ and `functionName` set to `"getActionId"`.
 */
export function useBasePoolAuthorizationGetActionId<
  TSelectData = ReadContractResult<
    typeof basePoolAuthorizationABI,
    'getActionId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolAuthorizationABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolAuthorizationABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolAuthorizationABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolAuthorizationABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useBasePoolAuthorizationGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof basePoolAuthorizationABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolAuthorizationABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolAuthorizationABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolAuthorizationABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolAuthorizationABI}__ and `functionName` set to `"getOwner"`.
 */
export function useBasePoolAuthorizationGetOwner<
  TSelectData = ReadContractResult<typeof basePoolAuthorizationABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolAuthorizationABI,
      'getOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolAuthorizationABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolAuthorizationABI,
    'getOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basePoolUserDataABI}__.
 */
export function useBasePoolUserData(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basePoolUserDataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolUserDataABI}__.
 */
export function useBasePoolUserDataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basePoolUserDataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolUserDataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolUserDataABI,
    ...config,
  } as UseContractReadConfig<
    typeof basePoolUserDataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePoolUserDataABI}__ and `functionName` set to `"RECOVERY_MODE_EXIT_KIND"`.
 */
export function useBasePoolUserDataRecoveryModeExitKind<
  TSelectData = ReadContractResult<
    typeof basePoolUserDataABI,
    'RECOVERY_MODE_EXIT_KIND'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof basePoolUserDataABI,
      'RECOVERY_MODE_EXIT_KIND',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePoolUserDataABI,
    functionName: 'RECOVERY_MODE_EXIT_KIND',
    ...config,
  } as UseContractReadConfig<
    typeof basePoolUserDataABI,
    'RECOVERY_MODE_EXIT_KIND',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eoaSignaturesValidatorABI}__.
 */
export function useEoaSignaturesValidator(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: eoaSignaturesValidatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eoaSignaturesValidatorABI}__.
 */
export function useEoaSignaturesValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof eoaSignaturesValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof eoaSignaturesValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: eoaSignaturesValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof eoaSignaturesValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eoaSignaturesValidatorABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useEoaSignaturesValidatorGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof eoaSignaturesValidatorABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof eoaSignaturesValidatorABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eoaSignaturesValidatorABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof eoaSignaturesValidatorABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eoaSignaturesValidatorABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useEoaSignaturesValidatorGetNextNonce<
  TSelectData = ReadContractResult<
    typeof eoaSignaturesValidatorABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof eoaSignaturesValidatorABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eoaSignaturesValidatorABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof eoaSignaturesValidatorABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20Permit(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useErc20PermitGetDomainSeparator<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useErc20PermitGetNextNonce<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<
  TSelectData = ReadContractResult<typeof erc20PermitABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, TFunctionName>({
    abi: erc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'approve'>({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'decreaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'increaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'permit'>({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transfer'>({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transferFrom'>({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link extraCalldataEoaSignaturesValidatorABI}__.
 */
export function useExtraCalldataEoaSignaturesValidator(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: extraCalldataEoaSignaturesValidatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link extraCalldataEoaSignaturesValidatorABI}__.
 */
export function useExtraCalldataEoaSignaturesValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof extraCalldataEoaSignaturesValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof extraCalldataEoaSignaturesValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: extraCalldataEoaSignaturesValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof extraCalldataEoaSignaturesValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link extraCalldataEoaSignaturesValidatorABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useExtraCalldataEoaSignaturesValidatorGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof extraCalldataEoaSignaturesValidatorABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof extraCalldataEoaSignaturesValidatorABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: extraCalldataEoaSignaturesValidatorABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof extraCalldataEoaSignaturesValidatorABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link extraCalldataEoaSignaturesValidatorABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useExtraCalldataEoaSignaturesValidatorGetNextNonce<
  TSelectData = ReadContractResult<
    typeof extraCalldataEoaSignaturesValidatorABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof extraCalldataEoaSignaturesValidatorABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: extraCalldataEoaSignaturesValidatorABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof extraCalldataEoaSignaturesValidatorABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link feesABI}__.
 */
export function useFees(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: feesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof feesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: feesABI, ...config } as UseContractReadConfig<
    typeof feesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"WETH"`.
 */
export function useFeesWeth<
  TSelectData = ReadContractResult<typeof feesABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getActionId"`.
 */
export function useFeesGetActionId<
  TSelectData = ReadContractResult<typeof feesABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useFeesGetAuthorizer<
  TSelectData = ReadContractResult<typeof feesABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getAuthorizer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useFeesGetDomainSeparator<
  TSelectData = ReadContractResult<typeof feesABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getDomainSeparator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getDomainSeparator', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useFeesGetInternalBalance<
  TSelectData = ReadContractResult<typeof feesABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getInternalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getInternalBalance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useFeesGetNextNonce<
  TSelectData = ReadContractResult<typeof feesABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useFeesGetPausedState<
  TSelectData = ReadContractResult<typeof feesABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getPausedState', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getPool"`.
 */
export function useFeesGetPool<
  TSelectData = ReadContractResult<typeof feesABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useFeesGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof feesABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getPoolTokenInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getPoolTokenInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useFeesGetPoolTokens<
  TSelectData = ReadContractResult<typeof feesABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'getPoolTokens', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useFeesGetProtocolFeesCollector<
  TSelectData = ReadContractResult<typeof feesABI, 'getProtocolFeesCollector'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof feesABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof feesABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useFeesHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof feesABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof feesABI, 'hasApprovedRelayer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feesABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<typeof feesABI, 'hasApprovedRelayer', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof feesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, TFunctionName>({
    abi: feesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useFeesBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'batchSwap'>({
    abi: feesABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useFeesDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'deregisterTokens'>['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'deregisterTokens'> & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'deregisterTokens'>({
    abi: feesABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"exitPool"`.
 */
export function useFeesExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'exitPool'>({
    abi: feesABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useFeesFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'flashLoan'>({
    abi: feesABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"joinPool"`.
 */
export function useFeesJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'joinPool'>({
    abi: feesABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useFeesManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'managePoolBalance'>['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'managePoolBalance'> & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'managePoolBalance'>({
    abi: feesABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useFeesManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'manageUserBalance'>['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'manageUserBalance'> & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'manageUserBalance'>({
    abi: feesABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useFeesQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'queryBatchSwap'>['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'queryBatchSwap'>({
    abi: feesABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"registerPool"`.
 */
export function useFeesRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'registerPool'>({
    abi: feesABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useFeesRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'registerTokens'>['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'registerTokens'>({
    abi: feesABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useFeesSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'setAuthorizer'>['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'setAuthorizer'>({
    abi: feesABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setPaused"`.
 */
export function useFeesSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'setPaused'>({
    abi: feesABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useFeesSetRelayerApproval<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'setRelayerApproval'>['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'setRelayerApproval'> & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'setRelayerApproval'>({
    abi: feesABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"swap"`.
 */
export function useFeesSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof feesABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof feesABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof feesABI, 'swap'>({
    abi: feesABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__.
 */
export function usePrepareFeesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareFeesBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareFeesDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareFeesExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareFeesFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareFeesJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareFeesManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareFeesManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareFeesQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareFeesRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareFeesRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareFeesSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareFeesSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareFeesSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'setRelayerApproval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feesABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareFeesSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feesABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feesABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feesABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__.
 */
export function useFeesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof feesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: feesABI, ...config } as UseContractEventConfig<
    typeof feesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useFeesAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useFeesExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useFeesFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useFeesInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useFeesPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useFeesPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useFeesPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useFeesPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useFeesRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"Swap"`.
 */
export function useFeesSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useFeesTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feesABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useFeesTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof feesABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: feesABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof feesABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link flashLoansABI}__.
 */
export function useFlashLoans(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: flashLoansABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__.
 */
export function useFlashLoansRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof flashLoansABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    ...config,
  } as UseContractReadConfig<typeof flashLoansABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"WETH"`.
 */
export function useFlashLoansWeth<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof flashLoansABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getActionId"`.
 */
export function useFlashLoansGetActionId<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof flashLoansABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useFlashLoansGetAuthorizer<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useFlashLoansGetDomainSeparator<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flashLoansABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useFlashLoansGetInternalBalance<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flashLoansABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useFlashLoansGetNextNonce<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof flashLoansABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useFlashLoansGetPausedState<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getPool"`.
 */
export function useFlashLoansGetPool<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof flashLoansABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useFlashLoansGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flashLoansABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useFlashLoansGetPoolTokens<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof flashLoansABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useFlashLoansGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof flashLoansABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flashLoansABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useFlashLoansHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof flashLoansABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flashLoansABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flashLoansABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof flashLoansABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__.
 */
export function useFlashLoansWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof flashLoansABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, TFunctionName>({
    abi: flashLoansABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useFlashLoansBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'batchSwap'>({
    abi: flashLoansABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useFlashLoansDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof flashLoansABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'deregisterTokens'>({
    abi: flashLoansABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"exitPool"`.
 */
export function useFlashLoansExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'exitPool'>({
    abi: flashLoansABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useFlashLoansFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'flashLoan'>({
    abi: flashLoansABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"joinPool"`.
 */
export function useFlashLoansJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'joinPool'>({
    abi: flashLoansABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useFlashLoansManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof flashLoansABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'managePoolBalance'>({
    abi: flashLoansABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useFlashLoansManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof flashLoansABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'manageUserBalance'>({
    abi: flashLoansABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useFlashLoansQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'queryBatchSwap'>({
    abi: flashLoansABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"registerPool"`.
 */
export function useFlashLoansRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'registerPool'>({
    abi: flashLoansABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useFlashLoansRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'registerTokens'>({
    abi: flashLoansABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useFlashLoansSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'setAuthorizer'>({
    abi: flashLoansABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setPaused"`.
 */
export function useFlashLoansSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'setPaused'>({
    abi: flashLoansABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useFlashLoansSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof flashLoansABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof flashLoansABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'setRelayerApproval'>({
    abi: flashLoansABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"swap"`.
 */
export function useFlashLoansSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof flashLoansABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof flashLoansABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof flashLoansABI, 'swap'>({
    abi: flashLoansABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__.
 */
export function usePrepareFlashLoansWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareFlashLoansBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareFlashLoansDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareFlashLoansExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareFlashLoansFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareFlashLoansJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareFlashLoansManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareFlashLoansManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareFlashLoansQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareFlashLoansRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareFlashLoansRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareFlashLoansSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareFlashLoansSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareFlashLoansSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flashLoansABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flashLoansABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareFlashLoansSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flashLoansABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flashLoansABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flashLoansABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__.
 */
export function useFlashLoansEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useFlashLoansAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useFlashLoansExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useFlashLoansFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useFlashLoansInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useFlashLoansPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useFlashLoansPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useFlashLoansPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useFlashLoansPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useFlashLoansRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"Swap"`.
 */
export function useFlashLoansSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useFlashLoansTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flashLoansABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useFlashLoansTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof flashLoansABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flashLoansABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof flashLoansABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAuthenticationABI}__.
 */
export function useIAuthentication(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAuthenticationABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAuthenticationABI}__.
 */
export function useIAuthenticationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAuthenticationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAuthenticationABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAuthenticationABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAuthenticationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAuthenticationABI}__ and `functionName` set to `"getActionId"`.
 */
export function useIAuthenticationGetActionId<
  TSelectData = ReadContractResult<typeof iAuthenticationABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAuthenticationABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAuthenticationABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof iAuthenticationABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAuthorizerABI}__.
 */
export function useIAuthorizer(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAuthorizerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAuthorizerABI}__.
 */
export function useIAuthorizerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAuthorizerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAuthorizerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAuthorizerABI,
    ...config,
  } as UseContractReadConfig<typeof iAuthorizerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAuthorizerABI}__ and `functionName` set to `"canPerform"`.
 */
export function useIAuthorizerCanPerform<
  TSelectData = ReadContractResult<typeof iAuthorizerABI, 'canPerform'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAuthorizerABI, 'canPerform', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAuthorizerABI,
    functionName: 'canPerform',
    ...config,
  } as UseContractReadConfig<typeof iAuthorizerABI, 'canPerform', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBasePoolABI}__.
 */
export function useIBasePool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBasePoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasePoolABI}__.
 */
export function useIBasePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBasePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasePoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBasePoolABI,
    ...config,
  } as UseContractReadConfig<typeof iBasePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useIBasePoolGetPoolId<
  TSelectData = ReadContractResult<typeof iBasePoolABI, 'getPoolId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasePoolABI, 'getPoolId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBasePoolABI,
    functionName: 'getPoolId',
    ...config,
  } as UseContractReadConfig<typeof iBasePoolABI, 'getPoolId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"getScalingFactors"`.
 */
export function useIBasePoolGetScalingFactors<
  TSelectData = ReadContractResult<typeof iBasePoolABI, 'getScalingFactors'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBasePoolABI,
      'getScalingFactors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBasePoolABI,
    functionName: 'getScalingFactors',
    ...config,
  } as UseContractReadConfig<
    typeof iBasePoolABI,
    'getScalingFactors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useIBasePoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<typeof iBasePoolABI, 'getSwapFeePercentage'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBasePoolABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBasePoolABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof iBasePoolABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasePoolABI}__.
 */
export function useIBasePoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBasePoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iBasePoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBasePoolABI, TFunctionName>({
    abi: iBasePoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function useIBasePoolOnExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBasePoolABI, 'onExitPool'>['abi'],
        'onExitPool'
      > & { functionName?: 'onExitPool' }
    : UseContractWriteConfig<TMode, typeof iBasePoolABI, 'onExitPool'> & {
        abi?: never
        functionName?: 'onExitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBasePoolABI, 'onExitPool'>({
    abi: iBasePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function useIBasePoolOnJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBasePoolABI, 'onJoinPool'>['abi'],
        'onJoinPool'
      > & { functionName?: 'onJoinPool' }
    : UseContractWriteConfig<TMode, typeof iBasePoolABI, 'onJoinPool'> & {
        abi?: never
        functionName?: 'onJoinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBasePoolABI, 'onJoinPool'>({
    abi: iBasePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function useIBasePoolQueryExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBasePoolABI, 'queryExit'>['abi'],
        'queryExit'
      > & { functionName?: 'queryExit' }
    : UseContractWriteConfig<TMode, typeof iBasePoolABI, 'queryExit'> & {
        abi?: never
        functionName?: 'queryExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBasePoolABI, 'queryExit'>({
    abi: iBasePoolABI,
    functionName: 'queryExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function useIBasePoolQueryJoin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iBasePoolABI, 'queryJoin'>['abi'],
        'queryJoin'
      > & { functionName?: 'queryJoin' }
    : UseContractWriteConfig<TMode, typeof iBasePoolABI, 'queryJoin'> & {
        abi?: never
        functionName?: 'queryJoin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iBasePoolABI, 'queryJoin'>({
    abi: iBasePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasePoolABI}__.
 */
export function usePrepareIBasePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasePoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasePoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function usePrepareIBasePoolOnExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasePoolABI, 'onExitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasePoolABI, 'onExitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function usePrepareIBasePoolOnJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasePoolABI, 'onJoinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasePoolABI, 'onJoinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function usePrepareIBasePoolQueryExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasePoolABI, 'queryExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasePoolABI,
    functionName: 'queryExit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasePoolABI, 'queryExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function usePrepareIBasePoolQueryJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasePoolABI, 'queryJoin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasePoolABI, 'queryJoin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iControlledPoolABI}__.
 */
export function useIControlledPool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iControlledPoolABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iControlledPoolABI}__.
 */
export function useIControlledPoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iControlledPoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iControlledPoolABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iControlledPoolABI, TFunctionName>({
    abi: iControlledPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iControlledPoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useIControlledPoolSetSwapFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iControlledPoolABI,
          'setSwapFeePercentage'
        >['abi'],
        'setSwapFeePercentage'
      > & { functionName?: 'setSwapFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof iControlledPoolABI,
        'setSwapFeePercentage'
      > & {
        abi?: never
        functionName?: 'setSwapFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iControlledPoolABI,
    'setSwapFeePercentage'
  >({
    abi: iControlledPoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iControlledPoolABI}__.
 */
export function usePrepareIControlledPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iControlledPoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iControlledPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iControlledPoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iControlledPoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareIControlledPoolSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iControlledPoolABI,
      'setSwapFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iControlledPoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iControlledPoolABI,
    'setSwapFeePercentage'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TSelectData = ReadContractResult<typeof ierc20PermitABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({
    abi: ierc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iFlashLoanRecipientABI}__.
 */
export function useIFlashLoanRecipient(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iFlashLoanRecipientABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlashLoanRecipientABI}__.
 */
export function useIFlashLoanRecipientWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFlashLoanRecipientABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iFlashLoanRecipientABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFlashLoanRecipientABI, TFunctionName>({
    abi: iFlashLoanRecipientABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlashLoanRecipientABI}__ and `functionName` set to `"receiveFlashLoan"`.
 */
export function useIFlashLoanRecipientReceiveFlashLoan<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFlashLoanRecipientABI,
          'receiveFlashLoan'
        >['abi'],
        'receiveFlashLoan'
      > & { functionName?: 'receiveFlashLoan' }
    : UseContractWriteConfig<
        TMode,
        typeof iFlashLoanRecipientABI,
        'receiveFlashLoan'
      > & {
        abi?: never
        functionName?: 'receiveFlashLoan'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iFlashLoanRecipientABI,
    'receiveFlashLoan'
  >({
    abi: iFlashLoanRecipientABI,
    functionName: 'receiveFlashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlashLoanRecipientABI}__.
 */
export function usePrepareIFlashLoanRecipientWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlashLoanRecipientABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlashLoanRecipientABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFlashLoanRecipientABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlashLoanRecipientABI}__ and `functionName` set to `"receiveFlashLoan"`.
 */
export function usePrepareIFlashLoanRecipientReceiveFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iFlashLoanRecipientABI,
      'receiveFlashLoan'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlashLoanRecipientABI,
    functionName: 'receiveFlashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFlashLoanRecipientABI,
    'receiveFlashLoan'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGeneralPoolABI}__.
 */
export function useIGeneralPool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGeneralPoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralPoolABI}__.
 */
export function useIGeneralPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGeneralPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralPoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralPoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useIGeneralPoolGetPoolId<
  TSelectData = ReadContractResult<typeof iGeneralPoolABI, 'getPoolId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGeneralPoolABI, 'getPoolId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralPoolABI,
    functionName: 'getPoolId',
    ...config,
  } as UseContractReadConfig<typeof iGeneralPoolABI, 'getPoolId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"getScalingFactors"`.
 */
export function useIGeneralPoolGetScalingFactors<
  TSelectData = ReadContractResult<typeof iGeneralPoolABI, 'getScalingFactors'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGeneralPoolABI,
      'getScalingFactors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralPoolABI,
    functionName: 'getScalingFactors',
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralPoolABI,
    'getScalingFactors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useIGeneralPoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<
    typeof iGeneralPoolABI,
    'getSwapFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iGeneralPoolABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGeneralPoolABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof iGeneralPoolABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__.
 */
export function useIGeneralPoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, TFunctionName>({
    abi: iGeneralPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function useIGeneralPoolOnExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, 'onExitPool'>['abi'],
        'onExitPool'
      > & { functionName?: 'onExitPool' }
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, 'onExitPool'> & {
        abi?: never
        functionName?: 'onExitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, 'onExitPool'>({
    abi: iGeneralPoolABI,
    functionName: 'onExitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function useIGeneralPoolOnJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, 'onJoinPool'>['abi'],
        'onJoinPool'
      > & { functionName?: 'onJoinPool' }
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, 'onJoinPool'> & {
        abi?: never
        functionName?: 'onJoinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, 'onJoinPool'>({
    abi: iGeneralPoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onSwap"`.
 */
export function useIGeneralPoolOnSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, 'onSwap'>['abi'],
        'onSwap'
      > & { functionName?: 'onSwap' }
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, 'onSwap'> & {
        abi?: never
        functionName?: 'onSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, 'onSwap'>({
    abi: iGeneralPoolABI,
    functionName: 'onSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function useIGeneralPoolQueryExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, 'queryExit'>['abi'],
        'queryExit'
      > & { functionName?: 'queryExit' }
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, 'queryExit'> & {
        abi?: never
        functionName?: 'queryExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, 'queryExit'>({
    abi: iGeneralPoolABI,
    functionName: 'queryExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function useIGeneralPoolQueryJoin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGeneralPoolABI, 'queryJoin'>['abi'],
        'queryJoin'
      > & { functionName?: 'queryJoin' }
    : UseContractWriteConfig<TMode, typeof iGeneralPoolABI, 'queryJoin'> & {
        abi?: never
        functionName?: 'queryJoin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGeneralPoolABI, 'queryJoin'>({
    abi: iGeneralPoolABI,
    functionName: 'queryJoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__.
 */
export function usePrepareIGeneralPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function usePrepareIGeneralPoolOnExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onExitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    functionName: 'onExitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onExitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function usePrepareIGeneralPoolOnJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onJoinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onJoinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"onSwap"`.
 */
export function usePrepareIGeneralPoolOnSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    functionName: 'onSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'onSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function usePrepareIGeneralPoolQueryExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'queryExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    functionName: 'queryExit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'queryExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGeneralPoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function usePrepareIGeneralPoolQueryJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'queryJoin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGeneralPoolABI,
    functionName: 'queryJoin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGeneralPoolABI, 'queryJoin'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__.
 */
export function useIMinimalSwapInfoPool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMinimalSwapInfoPoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__.
 */
export function useIMinimalSwapInfoPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iMinimalSwapInfoPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMinimalSwapInfoPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMinimalSwapInfoPoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof iMinimalSwapInfoPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useIMinimalSwapInfoPoolGetPoolId<
  TSelectData = ReadContractResult<typeof iMinimalSwapInfoPoolABI, 'getPoolId'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMinimalSwapInfoPoolABI,
      'getPoolId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'getPoolId',
    ...config,
  } as UseContractReadConfig<
    typeof iMinimalSwapInfoPoolABI,
    'getPoolId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"getScalingFactors"`.
 */
export function useIMinimalSwapInfoPoolGetScalingFactors<
  TSelectData = ReadContractResult<
    typeof iMinimalSwapInfoPoolABI,
    'getScalingFactors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMinimalSwapInfoPoolABI,
      'getScalingFactors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'getScalingFactors',
    ...config,
  } as UseContractReadConfig<
    typeof iMinimalSwapInfoPoolABI,
    'getScalingFactors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useIMinimalSwapInfoPoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<
    typeof iMinimalSwapInfoPoolABI,
    'getSwapFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMinimalSwapInfoPoolABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof iMinimalSwapInfoPoolABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__.
 */
export function useIMinimalSwapInfoPoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, TFunctionName>(
    { abi: iMinimalSwapInfoPoolABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function useIMinimalSwapInfoPoolOnExitPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          'onExitPool'
        >['abi'],
        'onExitPool'
      > & { functionName?: 'onExitPool' }
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        'onExitPool'
      > & {
        abi?: never
        functionName?: 'onExitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, 'onExitPool'>({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onExitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function useIMinimalSwapInfoPoolOnJoinPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          'onJoinPool'
        >['abi'],
        'onJoinPool'
      > & { functionName?: 'onJoinPool' }
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        'onJoinPool'
      > & {
        abi?: never
        functionName?: 'onJoinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, 'onJoinPool'>({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onSwap"`.
 */
export function useIMinimalSwapInfoPoolOnSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          'onSwap'
        >['abi'],
        'onSwap'
      > & { functionName?: 'onSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        'onSwap'
      > & {
        abi?: never
        functionName?: 'onSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, 'onSwap'>({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function useIMinimalSwapInfoPoolQueryExit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          'queryExit'
        >['abi'],
        'queryExit'
      > & { functionName?: 'queryExit' }
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        'queryExit'
      > & {
        abi?: never
        functionName?: 'queryExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, 'queryExit'>({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'queryExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function useIMinimalSwapInfoPoolQueryJoin<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMinimalSwapInfoPoolABI,
          'queryJoin'
        >['abi'],
        'queryJoin'
      > & { functionName?: 'queryJoin' }
    : UseContractWriteConfig<
        TMode,
        typeof iMinimalSwapInfoPoolABI,
        'queryJoin'
      > & {
        abi?: never
        functionName?: 'queryJoin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMinimalSwapInfoPoolABI, 'queryJoin'>({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'queryJoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__.
 */
export function usePrepareIMinimalSwapInfoPoolWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMinimalSwapInfoPoolABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMinimalSwapInfoPoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function usePrepareIMinimalSwapInfoPoolOnExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'onExitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onExitPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMinimalSwapInfoPoolABI,
    'onExitPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function usePrepareIMinimalSwapInfoPoolOnJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'onJoinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMinimalSwapInfoPoolABI,
    'onJoinPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"onSwap"`.
 */
export function usePrepareIMinimalSwapInfoPoolOnSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'onSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'onSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'onSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function usePrepareIMinimalSwapInfoPoolQueryExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'queryExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'queryExit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMinimalSwapInfoPoolABI,
    'queryExit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMinimalSwapInfoPoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function usePrepareIMinimalSwapInfoPoolQueryJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMinimalSwapInfoPoolABI, 'queryJoin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMinimalSwapInfoPoolABI,
    functionName: 'queryJoin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMinimalSwapInfoPoolABI,
    'queryJoin'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBasefee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBlockHash'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockHash', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBlockNumber'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockNumber', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockNumber',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getChainId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getChainId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getChainId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    'getCurrentBlockCoinbase'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      'getCurrentBlockCoinbase',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getCurrentBlockCoinbase',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    'getCurrentBlockDifficulty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      'getCurrentBlockDifficulty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getCurrentBlockDifficulty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    'getCurrentBlockGasLimit'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      'getCurrentBlockGasLimit',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getCurrentBlockGasLimit',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    'getCurrentBlockTimestamp'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      'getCurrentBlockTimestamp',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getCurrentBlockTimestamp',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getEthBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getEthBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getEthBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getLastBlockHash'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      'getLastBlockHash',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getLastBlockHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['abi'],
        'aggregate'
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate'> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['abi'],
        'aggregate3'
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3'> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['abi'],
        'aggregate3Value'
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'aggregate3Value'
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3Value'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['abi'],
        'blockAndAggregate'
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'blockAndAggregate'
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'blockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['abi'],
        'tryAggregate'
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryAggregate'> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['abi'],
        'tryBlockAndAggregate'
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'tryBlockAndAggregate'
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__.
 */
export function useIProtocolFeesCollector(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iProtocolFeesCollectorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__.
 */
export function useIProtocolFeesCollectorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iProtocolFeesCollectorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useIProtocolFeesCollectorGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof iProtocolFeesCollectorABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"getCollectedFeeAmounts"`.
 */
export function useIProtocolFeesCollectorGetCollectedFeeAmounts<
  TSelectData = ReadContractResult<
    typeof iProtocolFeesCollectorABI,
    'getCollectedFeeAmounts'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      'getCollectedFeeAmounts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    functionName: 'getCollectedFeeAmounts',
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    'getCollectedFeeAmounts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"getFlashLoanFeePercentage"`.
 */
export function useIProtocolFeesCollectorGetFlashLoanFeePercentage<
  TSelectData = ReadContractResult<
    typeof iProtocolFeesCollectorABI,
    'getFlashLoanFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      'getFlashLoanFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    functionName: 'getFlashLoanFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    'getFlashLoanFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useIProtocolFeesCollectorGetSwapFeePercentage<
  TSelectData = ReadContractResult<
    typeof iProtocolFeesCollectorABI,
    'getSwapFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"vault"`.
 */
export function useIProtocolFeesCollectorVault<
  TSelectData = ReadContractResult<typeof iProtocolFeesCollectorABI, 'vault'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iProtocolFeesCollectorABI,
      'vault',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProtocolFeesCollectorABI,
    functionName: 'vault',
    ...config,
  } as UseContractReadConfig<
    typeof iProtocolFeesCollectorABI,
    'vault',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__.
 */
export function useIProtocolFeesCollectorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iProtocolFeesCollectorABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iProtocolFeesCollectorABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iProtocolFeesCollectorABI,
    TFunctionName
  >({ abi: iProtocolFeesCollectorABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"setFlashLoanFeePercentage"`.
 */
export function useIProtocolFeesCollectorSetFlashLoanFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iProtocolFeesCollectorABI,
          'setFlashLoanFeePercentage'
        >['abi'],
        'setFlashLoanFeePercentage'
      > & { functionName?: 'setFlashLoanFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof iProtocolFeesCollectorABI,
        'setFlashLoanFeePercentage'
      > & {
        abi?: never
        functionName?: 'setFlashLoanFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iProtocolFeesCollectorABI,
    'setFlashLoanFeePercentage'
  >({
    abi: iProtocolFeesCollectorABI,
    functionName: 'setFlashLoanFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useIProtocolFeesCollectorSetSwapFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iProtocolFeesCollectorABI,
          'setSwapFeePercentage'
        >['abi'],
        'setSwapFeePercentage'
      > & { functionName?: 'setSwapFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof iProtocolFeesCollectorABI,
        'setSwapFeePercentage'
      > & {
        abi?: never
        functionName?: 'setSwapFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iProtocolFeesCollectorABI,
    'setSwapFeePercentage'
  >({
    abi: iProtocolFeesCollectorABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"withdrawCollectedFees"`.
 */
export function useIProtocolFeesCollectorWithdrawCollectedFees<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iProtocolFeesCollectorABI,
          'withdrawCollectedFees'
        >['abi'],
        'withdrawCollectedFees'
      > & { functionName?: 'withdrawCollectedFees' }
    : UseContractWriteConfig<
        TMode,
        typeof iProtocolFeesCollectorABI,
        'withdrawCollectedFees'
      > & {
        abi?: never
        functionName?: 'withdrawCollectedFees'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iProtocolFeesCollectorABI,
    'withdrawCollectedFees'
  >({
    abi: iProtocolFeesCollectorABI,
    functionName: 'withdrawCollectedFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__.
 */
export function usePrepareIProtocolFeesCollectorWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProtocolFeesCollectorABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProtocolFeesCollectorABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProtocolFeesCollectorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"setFlashLoanFeePercentage"`.
 */
export function usePrepareIProtocolFeesCollectorSetFlashLoanFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProtocolFeesCollectorABI,
      'setFlashLoanFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProtocolFeesCollectorABI,
    functionName: 'setFlashLoanFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProtocolFeesCollectorABI,
    'setFlashLoanFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareIProtocolFeesCollectorSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProtocolFeesCollectorABI,
      'setSwapFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProtocolFeesCollectorABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProtocolFeesCollectorABI,
    'setSwapFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `functionName` set to `"withdrawCollectedFees"`.
 */
export function usePrepareIProtocolFeesCollectorWithdrawCollectedFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProtocolFeesCollectorABI,
      'withdrawCollectedFees'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProtocolFeesCollectorABI,
    functionName: 'withdrawCollectedFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProtocolFeesCollectorABI,
    'withdrawCollectedFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__.
 */
export function useIProtocolFeesCollectorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iProtocolFeesCollectorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProtocolFeesCollectorABI,
    ...config,
  } as UseContractEventConfig<typeof iProtocolFeesCollectorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `eventName` set to `"FlashLoanFeePercentageChanged"`.
 */
export function useIProtocolFeesCollectorFlashLoanFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iProtocolFeesCollectorABI,
      'FlashLoanFeePercentageChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProtocolFeesCollectorABI,
    eventName: 'FlashLoanFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iProtocolFeesCollectorABI,
    'FlashLoanFeePercentageChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProtocolFeesCollectorABI}__ and `eventName` set to `"SwapFeePercentageChanged"`.
 */
export function useIProtocolFeesCollectorSwapFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iProtocolFeesCollectorABI,
      'SwapFeePercentageChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProtocolFeesCollectorABI,
    eventName: 'SwapFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iProtocolFeesCollectorABI,
    'SwapFeePercentageChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRecoveryModeABI}__.
 */
export function useIRecoveryMode(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iRecoveryModeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRecoveryModeABI}__.
 */
export function useIRecoveryModeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRecoveryModeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRecoveryModeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRecoveryModeABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRecoveryModeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRecoveryModeABI}__ and `functionName` set to `"inRecoveryMode"`.
 */
export function useIRecoveryModeInRecoveryMode<
  TSelectData = ReadContractResult<typeof iRecoveryModeABI, 'inRecoveryMode'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRecoveryModeABI,
      'inRecoveryMode',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRecoveryModeABI,
    functionName: 'inRecoveryMode',
    ...config,
  } as UseContractReadConfig<
    typeof iRecoveryModeABI,
    'inRecoveryMode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__.
 */
export function useIRecoveryModeWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRecoveryModeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iRecoveryModeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRecoveryModeABI, TFunctionName>({
    abi: iRecoveryModeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function useIRecoveryModeDisableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRecoveryModeABI,
          'disableRecoveryMode'
        >['abi'],
        'disableRecoveryMode'
      > & { functionName?: 'disableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof iRecoveryModeABI,
        'disableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'disableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iRecoveryModeABI,
    'disableRecoveryMode'
  >({
    abi: iRecoveryModeABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function useIRecoveryModeEnableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRecoveryModeABI,
          'enableRecoveryMode'
        >['abi'],
        'enableRecoveryMode'
      > & { functionName?: 'enableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof iRecoveryModeABI,
        'enableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'enableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRecoveryModeABI, 'enableRecoveryMode'>(
    {
      abi: iRecoveryModeABI,
      functionName: 'enableRecoveryMode',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__.
 */
export function usePrepareIRecoveryModeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRecoveryModeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRecoveryModeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRecoveryModeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function usePrepareIRecoveryModeDisableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRecoveryModeABI,
      'disableRecoveryMode'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRecoveryModeABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRecoveryModeABI,
    'disableRecoveryMode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRecoveryModeABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function usePrepareIRecoveryModeEnableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRecoveryModeABI,
      'enableRecoveryMode'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRecoveryModeABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRecoveryModeABI,
    'enableRecoveryMode'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRecoveryModeABI}__.
 */
export function useIRecoveryModeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRecoveryModeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRecoveryModeABI,
    ...config,
  } as UseContractEventConfig<typeof iRecoveryModeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRecoveryModeABI}__ and `eventName` set to `"RecoveryModeStateChanged"`.
 */
export function useIRecoveryModeRecoveryModeStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRecoveryModeABI, 'RecoveryModeStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRecoveryModeABI,
    eventName: 'RecoveryModeStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iRecoveryModeABI,
    'RecoveryModeStateChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iSignaturesValidatorABI}__.
 */
export function useISignaturesValidator(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iSignaturesValidatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignaturesValidatorABI}__.
 */
export function useISignaturesValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSignaturesValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignaturesValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignaturesValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSignaturesValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignaturesValidatorABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useISignaturesValidatorGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof iSignaturesValidatorABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignaturesValidatorABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignaturesValidatorABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof iSignaturesValidatorABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignaturesValidatorABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useISignaturesValidatorGetNextNonce<
  TSelectData = ReadContractResult<
    typeof iSignaturesValidatorABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignaturesValidatorABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignaturesValidatorABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof iSignaturesValidatorABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTemporarilyPausableABI}__.
 */
export function useITemporarilyPausable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iTemporarilyPausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTemporarilyPausableABI}__.
 */
export function useITemporarilyPausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iTemporarilyPausableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iTemporarilyPausableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iTemporarilyPausableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iTemporarilyPausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTemporarilyPausableABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useITemporarilyPausableGetPausedState<
  TSelectData = ReadContractResult<
    typeof iTemporarilyPausableABI,
    'getPausedState'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iTemporarilyPausableABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTemporarilyPausableABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof iTemporarilyPausableABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTemporarilyPausableABI}__.
 */
export function useITemporarilyPausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iTemporarilyPausableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTemporarilyPausableABI,
    ...config,
  } as UseContractEventConfig<typeof iTemporarilyPausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTemporarilyPausableABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useITemporarilyPausablePausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iTemporarilyPausableABI,
      'PausedStateChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTemporarilyPausableABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iTemporarilyPausableABI,
    'PausedStateChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iwethABI}__.
 */
export function useIweth(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iwethABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iwethABI}__.
 */
export function useIwethRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iwethABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iwethABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iwethABI, ...config } as UseContractReadConfig<
    typeof iwethABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"allowance"`.
 */
export function useIwethAllowance<
  TSelectData = ReadContractResult<typeof iwethABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iwethABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iwethABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof iwethABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIwethBalanceOf<
  TSelectData = ReadContractResult<typeof iwethABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iwethABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iwethABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iwethABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIwethTotalSupply<
  TSelectData = ReadContractResult<typeof iwethABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iwethABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iwethABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iwethABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__.
 */
export function useIwethWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iwethABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, TFunctionName>({
    abi: iwethABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"approve"`.
 */
export function useIwethApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iwethABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, 'approve'>({
    abi: iwethABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"deposit"`.
 */
export function useIwethDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof iwethABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, 'deposit'>({
    abi: iwethABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"transfer"`.
 */
export function useIwethTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof iwethABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, 'transfer'>({
    abi: iwethABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIwethTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof iwethABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, 'transferFrom'>({
    abi: iwethABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIwethWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iwethABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof iwethABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iwethABI, 'withdraw'>({
    abi: iwethABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__.
 */
export function usePrepareIwethWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIwethApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIwethDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIwethTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIwethTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iwethABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIwethWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iwethABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iwethABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iwethABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iwethABI}__.
 */
export function useIwethEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iwethABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iwethABI,
    ...config,
  } as UseContractEventConfig<typeof iwethABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iwethABI}__ and `eventName` set to `"Approval"`.
 */
export function useIwethApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iwethABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iwethABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iwethABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iwethABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIwethTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iwethABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iwethABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iwethABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVaultABI}__.
 */
export function useIVault(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iVaultABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__.
 */
export function useIVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iVaultABI, ...config } as UseContractReadConfig<
    typeof iVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"WETH"`.
 */
export function useIVaultWeth<
  TSelectData = ReadContractResult<typeof iVaultABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getActionId"`.
 */
export function useIVaultGetActionId<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useIVaultGetAuthorizer<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getAuthorizer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useIVaultGetDomainSeparator<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getDomainSeparator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof iVaultABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useIVaultGetInternalBalance<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getInternalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof iVaultABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useIVaultGetNextNonce<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useIVaultGetPausedState<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getPausedState', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getPool"`.
 */
export function useIVaultGetPool<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useIVaultGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getPoolTokenInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getPoolTokenInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useIVaultGetPoolTokens<
  TSelectData = ReadContractResult<typeof iVaultABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<typeof iVaultABI, 'getPoolTokens', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useIVaultGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof iVaultABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVaultABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof iVaultABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useIVaultHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof iVaultABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVaultABI, 'hasApprovedRelayer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVaultABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof iVaultABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__.
 */
export function useIVaultWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVaultABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, TFunctionName>({
    abi: iVaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useIVaultBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'batchSwap'>({
    abi: iVaultABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useIVaultDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'deregisterTokens'>['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'deregisterTokens'> & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'deregisterTokens'>({
    abi: iVaultABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"exitPool"`.
 */
export function useIVaultExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'exitPool'>({
    abi: iVaultABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useIVaultFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'flashLoan'>({
    abi: iVaultABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"joinPool"`.
 */
export function useIVaultJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'joinPool'>({
    abi: iVaultABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useIVaultManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVaultABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'managePoolBalance'> & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'managePoolBalance'>({
    abi: iVaultABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useIVaultManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVaultABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'manageUserBalance'> & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'manageUserBalance'>({
    abi: iVaultABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useIVaultQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'queryBatchSwap'>['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'queryBatchSwap'>({
    abi: iVaultABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"registerPool"`.
 */
export function useIVaultRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'registerPool'>({
    abi: iVaultABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useIVaultRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'registerTokens'>['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'registerTokens'>({
    abi: iVaultABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useIVaultSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'setAuthorizer'>['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'setAuthorizer'>({
    abi: iVaultABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setPaused"`.
 */
export function useIVaultSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'setPaused'>({
    abi: iVaultABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useIVaultSetRelayerApproval<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVaultABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'setRelayerApproval'> & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'setRelayerApproval'>({
    abi: iVaultABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"swap"`.
 */
export function useIVaultSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVaultABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iVaultABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVaultABI, 'swap'>({
    abi: iVaultABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__.
 */
export function usePrepareIVaultWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareIVaultBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareIVaultDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareIVaultExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareIVaultFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareIVaultJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareIVaultManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareIVaultManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareIVaultQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareIVaultRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareIVaultRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareIVaultSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareIVaultSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareIVaultSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'setRelayerApproval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVaultABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareIVaultSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVaultABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVaultABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVaultABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__.
 */
export function useIVaultEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useIVaultAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useIVaultExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useIVaultFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useIVaultInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useIVaultPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useIVaultPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useIVaultPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useIVaultPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useIVaultRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"Swap"`.
 */
export function useIVaultSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useIVaultTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVaultABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useIVaultTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iVaultABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVaultABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof iVaultABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__.
 */
export function useMinimalSwapInfoPoolsBalance(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: minimalSwapInfoPoolsBalanceABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__.
 */
export function useMinimalSwapInfoPoolsBalanceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"WETH"`.
 */
export function useMinimalSwapInfoPoolsBalanceWeth<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'WETH'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'WETH',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'WETH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getActionId"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetActionId<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getActionId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetNextNonce<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetPausedState<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPausedState'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getPool"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetPool<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPool'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getPool',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPool',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetPoolTokenInfo<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPoolTokenInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetPoolTokens<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPoolTokens'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getPoolTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useMinimalSwapInfoPoolsBalanceGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useMinimalSwapInfoPoolsBalanceHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof minimalSwapInfoPoolsBalanceABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__.
 */
export function useMinimalSwapInfoPoolsBalanceWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    TFunctionName
  >({ abi: minimalSwapInfoPoolsBalanceABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useMinimalSwapInfoPoolsBalanceBatchSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'batchSwap'
        >['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'batchSwap'
      > & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'batchSwap'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useMinimalSwapInfoPoolsBalanceDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'deregisterTokens'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function useMinimalSwapInfoPoolsBalanceExitPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'exitPool'
        >['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'exitPool'
      > & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'exitPool'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useMinimalSwapInfoPoolsBalanceFlashLoan<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'flashLoan'
        >['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'flashLoan'
      > & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'flashLoan'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function useMinimalSwapInfoPoolsBalanceJoinPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'joinPool'
        >['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'joinPool'
      > & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'joinPool'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useMinimalSwapInfoPoolsBalanceManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'managePoolBalance'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useMinimalSwapInfoPoolsBalanceManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'manageUserBalance'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useMinimalSwapInfoPoolsBalanceQueryBatchSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'queryBatchSwap'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function useMinimalSwapInfoPoolsBalanceRegisterPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'registerPool'
      > & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'registerPool'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useMinimalSwapInfoPoolsBalanceRegisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'registerTokens'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useMinimalSwapInfoPoolsBalanceSetAuthorizer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'setAuthorizer'
      > & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'setAuthorizer'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function useMinimalSwapInfoPoolsBalanceSetPaused<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'setPaused'
        >['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'setPaused'
      > & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'setPaused'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useMinimalSwapInfoPoolsBalanceSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof minimalSwapInfoPoolsBalanceABI,
    'setRelayerApproval'
  >({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function useMinimalSwapInfoPoolsBalanceSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof minimalSwapInfoPoolsBalanceABI,
          'swap'
        >['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<
        TMode,
        typeof minimalSwapInfoPoolsBalanceABI,
        'swap'
      > & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof minimalSwapInfoPoolsBalanceABI, 'swap'>(
    {
      abi: minimalSwapInfoPoolsBalanceABI,
      functionName: 'swap',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'batchSwap'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'batchSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'deregisterTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'exitPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'exitPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'flashLoan'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'flashLoan'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'joinPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'joinPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'managePoolBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'manageUserBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'queryBatchSwap'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'queryBatchSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'registerPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'registerPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'registerTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'registerTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'setAuthorizer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'setAuthorizer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'setPaused'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'setPaused'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'setRelayerApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareMinimalSwapInfoPoolsBalanceSwap(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'swap'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: minimalSwapInfoPoolsBalanceABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'swap'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__.
 */
export function useMinimalSwapInfoPoolsBalanceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof minimalSwapInfoPoolsBalanceABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useMinimalSwapInfoPoolsBalanceAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'AuthorizerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'AuthorizerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useMinimalSwapInfoPoolsBalanceExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'ExternalBalanceTransfer'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useMinimalSwapInfoPoolsBalanceFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof minimalSwapInfoPoolsBalanceABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'FlashLoan'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useMinimalSwapInfoPoolsBalanceInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'InternalBalanceChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'InternalBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useMinimalSwapInfoPoolsBalancePausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'PausedStateChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'PausedStateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useMinimalSwapInfoPoolsBalancePoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'PoolBalanceChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'PoolBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useMinimalSwapInfoPoolsBalancePoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'PoolBalanceManaged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'PoolBalanceManaged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useMinimalSwapInfoPoolsBalancePoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'PoolRegistered'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'PoolRegistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useMinimalSwapInfoPoolsBalanceRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'RelayerApprovalChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'RelayerApprovalChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"Swap"`.
 */
export function useMinimalSwapInfoPoolsBalanceSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof minimalSwapInfoPoolsBalanceABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof minimalSwapInfoPoolsBalanceABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useMinimalSwapInfoPoolsBalanceTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'TokensDeregistered'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'TokensDeregistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link minimalSwapInfoPoolsBalanceABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useMinimalSwapInfoPoolsBalanceTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof minimalSwapInfoPoolsBalanceABI,
      'TokensRegistered'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: minimalSwapInfoPoolsBalanceABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<
    typeof minimalSwapInfoPoolsBalanceABI,
    'TokensRegistered'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockBasePoolABI}__.
 */
export function useMockBasePool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: mockBasePoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__.
 */
export function useMockBasePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockBasePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockBasePoolDomainSeparator<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockBasePoolAllowance<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockBasePoolBalanceOf<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockBasePoolDecimals<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"doNotCallInRecovery"`.
 */
export function useMockBasePoolDoNotCallInRecovery<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'doNotCallInRecovery'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'doNotCallInRecovery',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'doNotCallInRecovery',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'doNotCallInRecovery',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getActionId"`.
 */
export function useMockBasePoolGetActionId<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useMockBasePoolGetAuthorizer<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useMockBasePoolGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getMiscData"`.
 */
export function useMockBasePoolGetMiscData<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getMiscData'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getMiscData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getMiscData',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getMiscData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useMockBasePoolGetNextNonce<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getOwner"`.
 */
export function useMockBasePoolGetOwner<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useMockBasePoolGetPausedState<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useMockBasePoolGetPoolId<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getPoolId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getPoolId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getPoolId',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'getPoolId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useMockBasePoolGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getScalingFactors"`.
 */
export function useMockBasePoolGetScalingFactors<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getScalingFactors'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'getScalingFactors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getScalingFactors',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getScalingFactors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useMockBasePoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'getSwapFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"getVault"`.
 */
export function useMockBasePoolGetVault<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'getVault'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'getVault', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'getVault',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'getVault', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"inRecoveryMode"`.
 */
export function useMockBasePoolInRecoveryMode<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'inRecoveryMode'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'inRecoveryMode',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'inRecoveryMode',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'inRecoveryMode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"name"`.
 */
export function useMockBasePoolName<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockBasePoolNonces<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"notCallableInRecovery"`.
 */
export function useMockBasePoolNotCallableInRecovery<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'notCallableInRecovery'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'notCallableInRecovery',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'notCallableInRecovery',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'notCallableInRecovery',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"onlyCallableInRecovery"`.
 */
export function useMockBasePoolOnlyCallableInRecovery<
  TSelectData = ReadContractResult<
    typeof mockBasePoolABI,
    'onlyCallableInRecovery'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockBasePoolABI,
      'onlyCallableInRecovery',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'onlyCallableInRecovery',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'onlyCallableInRecovery',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockBasePoolSymbol<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockBasePoolTotalSupply<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof mockBasePoolABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"vault"`.
 */
export function useMockBasePoolVault<
  TSelectData = ReadContractResult<typeof mockBasePoolABI, 'vault'>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBasePoolABI, 'vault', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockBasePoolABI,
    functionName: 'vault',
    ...config,
  } as UseContractReadConfig<typeof mockBasePoolABI, 'vault', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__.
 */
export function useMockBasePoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, TFunctionName>({
    abi: mockBasePoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"approve"`.
 */
export function useMockBasePoolApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'approve'>({
    abi: mockBasePoolABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockBasePoolDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'decreaseAllowance'>({
    abi: mockBasePoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function useMockBasePoolDisableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'disableRecoveryMode'
        >['abi'],
        'disableRecoveryMode'
      > & { functionName?: 'disableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'disableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'disableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'disableRecoveryMode'>(
    {
      abi: mockBasePoolABI,
      functionName: 'disableRecoveryMode',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function useMockBasePoolEnableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'enableRecoveryMode'
        >['abi'],
        'enableRecoveryMode'
      > & { functionName?: 'enableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'enableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'enableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'enableRecoveryMode'>({
    abi: mockBasePoolABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockBasePoolIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'increaseAllowance'>({
    abi: mockBasePoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function useMockBasePoolOnExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'onExitPool'>['abi'],
        'onExitPool'
      > & { functionName?: 'onExitPool' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'onExitPool'> & {
        abi?: never
        functionName?: 'onExitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'onExitPool'>({
    abi: mockBasePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function useMockBasePoolOnJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'onJoinPool'>['abi'],
        'onJoinPool'
      > & { functionName?: 'onJoinPool' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'onJoinPool'> & {
        abi?: never
        functionName?: 'onJoinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'onJoinPool'>({
    abi: mockBasePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"pause"`.
 */
export function useMockBasePoolPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'pause'>({
    abi: mockBasePoolABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"payProtocolFees"`.
 */
export function useMockBasePoolPayProtocolFees<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'payProtocolFees'
        >['abi'],
        'payProtocolFees'
      > & { functionName?: 'payProtocolFees' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'payProtocolFees'
      > & {
        abi?: never
        functionName?: 'payProtocolFees'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'payProtocolFees'>({
    abi: mockBasePoolABI,
    functionName: 'payProtocolFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"permit"`.
 */
export function useMockBasePoolPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'permit'>({
    abi: mockBasePoolABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function useMockBasePoolQueryExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'queryExit'>['abi'],
        'queryExit'
      > & { functionName?: 'queryExit' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'queryExit'> & {
        abi?: never
        functionName?: 'queryExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'queryExit'>({
    abi: mockBasePoolABI,
    functionName: 'queryExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function useMockBasePoolQueryJoin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'queryJoin'>['abi'],
        'queryJoin'
      > & { functionName?: 'queryJoin' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'queryJoin'> & {
        abi?: never
        functionName?: 'queryJoin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'queryJoin'>({
    abi: mockBasePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setFailBeforeSwapJoinExit"`.
 */
export function useMockBasePoolSetFailBeforeSwapJoinExit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'setFailBeforeSwapJoinExit'
        >['abi'],
        'setFailBeforeSwapJoinExit'
      > & { functionName?: 'setFailBeforeSwapJoinExit' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'setFailBeforeSwapJoinExit'
      > & {
        abi?: never
        functionName?: 'setFailBeforeSwapJoinExit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockBasePoolABI,
    'setFailBeforeSwapJoinExit'
  >({
    abi: mockBasePoolABI,
    functionName: 'setFailBeforeSwapJoinExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setMiscData"`.
 */
export function useMockBasePoolSetMiscData<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'setMiscData'
        >['abi'],
        'setMiscData'
      > & { functionName?: 'setMiscData' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'setMiscData'> & {
        abi?: never
        functionName?: 'setMiscData'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'setMiscData'>({
    abi: mockBasePoolABI,
    functionName: 'setMiscData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useMockBasePoolSetSwapFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'setSwapFeePercentage'
        >['abi'],
        'setSwapFeePercentage'
      > & { functionName?: 'setSwapFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof mockBasePoolABI,
        'setSwapFeePercentage'
      > & {
        abi?: never
        functionName?: 'setSwapFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockBasePoolABI,
    'setSwapFeePercentage'
  >({
    abi: mockBasePoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockBasePoolTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'transfer'>({
    abi: mockBasePoolABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockBasePoolTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockBasePoolABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'transferFrom'>({
    abi: mockBasePoolABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"unpause"`.
 */
export function useMockBasePoolUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBasePoolABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof mockBasePoolABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBasePoolABI, 'unpause'>({
    abi: mockBasePoolABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__.
 */
export function usePrepareMockBasePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockBasePoolApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockBasePoolDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function usePrepareMockBasePoolDisableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBasePoolABI,
      'disableRecoveryMode'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'disableRecoveryMode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function usePrepareMockBasePoolEnableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'enableRecoveryMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'enableRecoveryMode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockBasePoolIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"onExitPool"`.
 */
export function usePrepareMockBasePoolOnExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'onExitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'onExitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'onExitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"onJoinPool"`.
 */
export function usePrepareMockBasePoolOnJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'onJoinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'onJoinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'onJoinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMockBasePoolPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"payProtocolFees"`.
 */
export function usePrepareMockBasePoolPayProtocolFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'payProtocolFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'payProtocolFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'payProtocolFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockBasePoolPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"queryExit"`.
 */
export function usePrepareMockBasePoolQueryExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'queryExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'queryExit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'queryExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"queryJoin"`.
 */
export function usePrepareMockBasePoolQueryJoin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'queryJoin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'queryJoin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'queryJoin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setFailBeforeSwapJoinExit"`.
 */
export function usePrepareMockBasePoolSetFailBeforeSwapJoinExit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBasePoolABI,
      'setFailBeforeSwapJoinExit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'setFailBeforeSwapJoinExit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'setFailBeforeSwapJoinExit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setMiscData"`.
 */
export function usePrepareMockBasePoolSetMiscData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'setMiscData'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'setMiscData',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'setMiscData'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareMockBasePoolSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockBasePoolABI,
      'setSwapFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockBasePoolABI,
    'setSwapFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockBasePoolTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockBasePoolTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBasePoolABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMockBasePoolUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBasePoolABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBasePoolABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__.
 */
export function useMockBasePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockBasePoolApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"InnerOnExitPoolCalled"`.
 */
export function useMockBasePoolInnerOnExitPoolCalledEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'InnerOnExitPoolCalled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'InnerOnExitPoolCalled',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'InnerOnExitPoolCalled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"InnerOnJoinPoolCalled"`.
 */
export function useMockBasePoolInnerOnJoinPoolCalledEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'InnerOnJoinPoolCalled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'InnerOnJoinPoolCalled',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'InnerOnJoinPoolCalled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useMockBasePoolPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"RecoveryModeExit"`.
 */
export function useMockBasePoolRecoveryModeExitEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'RecoveryModeExit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'RecoveryModeExit',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'RecoveryModeExit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"RecoveryModeStateChanged"`.
 */
export function useMockBasePoolRecoveryModeStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'RecoveryModeStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'RecoveryModeStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof mockBasePoolABI,
    'RecoveryModeStateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"SwapFeePercentageChanged"`.
 */
export function useMockBasePoolSwapFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'SwapFeePercentageChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'SwapFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<
    typeof mockBasePoolABI,
    'SwapFeePercentageChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockBasePoolABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockBasePoolTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockBasePoolABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockBasePoolABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mockBasePoolABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolBalancesABI}__.
 */
export function usePoolBalances(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: poolBalancesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__.
 */
export function usePoolBalancesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolBalancesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"WETH"`.
 */
export function usePoolBalancesWeth<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof poolBalancesABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getActionId"`.
 */
export function usePoolBalancesGetActionId<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function usePoolBalancesGetAuthorizer<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function usePoolBalancesGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof poolBalancesABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function usePoolBalancesGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof poolBalancesABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function usePoolBalancesGetNextNonce<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getPausedState"`.
 */
export function usePoolBalancesGetPausedState<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getPool"`.
 */
export function usePoolBalancesGetPool<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof poolBalancesABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function usePoolBalancesGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function usePoolBalancesGetPoolTokens<
  TSelectData = ReadContractResult<typeof poolBalancesABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolBalancesABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function usePoolBalancesGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof poolBalancesABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function usePoolBalancesHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof poolBalancesABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolBalancesABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolBalancesABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof poolBalancesABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__.
 */
export function usePoolBalancesWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, TFunctionName>({
    abi: poolBalancesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePoolBalancesBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'batchSwap'>({
    abi: poolBalancesABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePoolBalancesDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'deregisterTokens'>({
    abi: poolBalancesABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePoolBalancesExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'exitPool'>({
    abi: poolBalancesABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePoolBalancesFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'flashLoan'>({
    abi: poolBalancesABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePoolBalancesJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'joinPool'>({
    abi: poolBalancesABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePoolBalancesManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'managePoolBalance'>({
    abi: poolBalancesABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePoolBalancesManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'manageUserBalance'>({
    abi: poolBalancesABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePoolBalancesQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'queryBatchSwap'>({
    abi: poolBalancesABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePoolBalancesRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'registerPool'>({
    abi: poolBalancesABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePoolBalancesRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'registerTokens'>({
    abi: poolBalancesABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePoolBalancesSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'setAuthorizer'>({
    abi: poolBalancesABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePoolBalancesSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'setPaused'>({
    abi: poolBalancesABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePoolBalancesSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolBalancesABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof poolBalancesABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'setRelayerApproval'>({
    abi: poolBalancesABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"swap"`.
 */
export function usePoolBalancesSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolBalancesABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof poolBalancesABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolBalancesABI, 'swap'>({
    abi: poolBalancesABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__.
 */
export function usePreparePoolBalancesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePreparePoolBalancesBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePreparePoolBalancesDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolBalancesABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePreparePoolBalancesExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePreparePoolBalancesFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePreparePoolBalancesJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePreparePoolBalancesManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolBalancesABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePreparePoolBalancesManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolBalancesABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePreparePoolBalancesQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePreparePoolBalancesRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePreparePoolBalancesRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePreparePoolBalancesSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePreparePoolBalancesSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePreparePoolBalancesSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolBalancesABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolBalancesABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePoolBalancesSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolBalancesABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolBalancesABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolBalancesABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__.
 */
export function usePoolBalancesEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function usePoolBalancesAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function usePoolBalancesExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof poolBalancesABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function usePoolBalancesFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function usePoolBalancesInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function usePoolBalancesPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function usePoolBalancesPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function usePoolBalancesPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function usePoolBalancesPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function usePoolBalancesRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"Swap"`.
 */
export function usePoolBalancesSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function usePoolBalancesTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolBalancesABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function usePoolBalancesTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolBalancesABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolBalancesABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolBalancesABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPoolMetadataRegistryABI}__.
 */
export function useIPoolMetadataRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iPoolMetadataRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPoolMetadataRegistryABI}__.
 */
export function useIPoolMetadataRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iPoolMetadataRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iPoolMetadataRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof iPoolMetadataRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iPoolMetadataRegistryABI}__ and `eventName` set to `"PoolMetadataUpdated"`.
 */
export function useIPoolMetadataRegistryPoolMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iPoolMetadataRegistryABI,
      'PoolMetadataUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iPoolMetadataRegistryABI,
    eventName: 'PoolMetadataUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iPoolMetadataRegistryABI,
    'PoolMetadataUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolMetadataRegistryABI}__.
 */
export function usePoolMetadataRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: poolMetadataRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolMetadataRegistryABI}__.
 */
export function usePoolMetadataRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof poolMetadataRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolMetadataRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poolMetadataRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof poolMetadataRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolMetadataRegistryABI}__ and `functionName` set to `"_isPoolOwner"`.
 */
export function usePoolMetadataRegistryIsPoolOwner<
  TSelectData = ReadContractResult<
    typeof poolMetadataRegistryABI,
    '_isPoolOwner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolMetadataRegistryABI,
      '_isPoolOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolMetadataRegistryABI,
    functionName: '_isPoolOwner',
    ...config,
  } as UseContractReadConfig<
    typeof poolMetadataRegistryABI,
    '_isPoolOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolMetadataRegistryABI}__ and `functionName` set to `"poolIdMetadataCIDMap"`.
 */
export function usePoolMetadataRegistryPoolIdMetadataCidMap<
  TSelectData = ReadContractResult<
    typeof poolMetadataRegistryABI,
    'poolIdMetadataCIDMap'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolMetadataRegistryABI,
      'poolIdMetadataCIDMap',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolMetadataRegistryABI,
    functionName: 'poolIdMetadataCIDMap',
    ...config,
  } as UseContractReadConfig<
    typeof poolMetadataRegistryABI,
    'poolIdMetadataCIDMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolMetadataRegistryABI}__.
 */
export function usePoolMetadataRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolMetadataRegistryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof poolMetadataRegistryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolMetadataRegistryABI, TFunctionName>(
    { abi: poolMetadataRegistryABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolMetadataRegistryABI}__ and `functionName` set to `"setPoolMetadata"`.
 */
export function usePoolMetadataRegistrySetPoolMetadata<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolMetadataRegistryABI,
          'setPoolMetadata'
        >['abi'],
        'setPoolMetadata'
      > & { functionName?: 'setPoolMetadata' }
    : UseContractWriteConfig<
        TMode,
        typeof poolMetadataRegistryABI,
        'setPoolMetadata'
      > & {
        abi?: never
        functionName?: 'setPoolMetadata'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof poolMetadataRegistryABI,
    'setPoolMetadata'
  >({
    abi: poolMetadataRegistryABI,
    functionName: 'setPoolMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolMetadataRegistryABI}__.
 */
export function usePreparePoolMetadataRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolMetadataRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolMetadataRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolMetadataRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolMetadataRegistryABI}__ and `functionName` set to `"setPoolMetadata"`.
 */
export function usePreparePoolMetadataRegistrySetPoolMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof poolMetadataRegistryABI,
      'setPoolMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolMetadataRegistryABI,
    functionName: 'setPoolMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolMetadataRegistryABI,
    'setPoolMetadata'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolMetadataRegistryABI}__.
 */
export function usePoolMetadataRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolMetadataRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolMetadataRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof poolMetadataRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolMetadataRegistryABI}__ and `eventName` set to `"PoolMetadataUpdated"`.
 */
export function usePoolMetadataRegistryPoolMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof poolMetadataRegistryABI,
      'PoolMetadataUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolMetadataRegistryABI,
    eventName: 'PoolMetadataUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof poolMetadataRegistryABI,
    'PoolMetadataUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolRegistryABI}__.
 */
export function usePoolRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: poolRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__.
 */
export function usePoolRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"WETH"`.
 */
export function usePoolRegistryWeth<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof poolRegistryABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getActionId"`.
 */
export function usePoolRegistryGetActionId<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function usePoolRegistryGetAuthorizer<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function usePoolRegistryGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof poolRegistryABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function usePoolRegistryGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof poolRegistryABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function usePoolRegistryGetNextNonce<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getPausedState"`.
 */
export function usePoolRegistryGetPausedState<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getPool"`.
 */
export function usePoolRegistryGetPool<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof poolRegistryABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function usePoolRegistryGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function usePoolRegistryGetPoolTokens<
  TSelectData = ReadContractResult<typeof poolRegistryABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolRegistryABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function usePoolRegistryGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof poolRegistryABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function usePoolRegistryHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof poolRegistryABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolRegistryABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolRegistryABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof poolRegistryABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__.
 */
export function usePoolRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, TFunctionName>({
    abi: poolRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePoolRegistryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'batchSwap'>({
    abi: poolRegistryABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePoolRegistryDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'deregisterTokens'>({
    abi: poolRegistryABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePoolRegistryExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'exitPool'>({
    abi: poolRegistryABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePoolRegistryFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'flashLoan'>({
    abi: poolRegistryABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePoolRegistryJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'joinPool'>({
    abi: poolRegistryABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePoolRegistryManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'managePoolBalance'>({
    abi: poolRegistryABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePoolRegistryManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'manageUserBalance'>({
    abi: poolRegistryABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePoolRegistryQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'queryBatchSwap'>({
    abi: poolRegistryABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePoolRegistryRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'registerPool'>({
    abi: poolRegistryABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePoolRegistryRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'registerTokens'>({
    abi: poolRegistryABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePoolRegistrySetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'setAuthorizer'>({
    abi: poolRegistryABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePoolRegistrySetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'setPaused'>({
    abi: poolRegistryABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePoolRegistrySetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolRegistryABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof poolRegistryABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'setRelayerApproval'>({
    abi: poolRegistryABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"swap"`.
 */
export function usePoolRegistrySwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolRegistryABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof poolRegistryABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolRegistryABI, 'swap'>({
    abi: poolRegistryABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__.
 */
export function usePreparePoolRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePreparePoolRegistryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePreparePoolRegistryDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolRegistryABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePreparePoolRegistryExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePreparePoolRegistryFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePreparePoolRegistryJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePreparePoolRegistryManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolRegistryABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePreparePoolRegistryManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolRegistryABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePreparePoolRegistryQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePreparePoolRegistryRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePreparePoolRegistryRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePreparePoolRegistrySetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePreparePoolRegistrySetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePreparePoolRegistrySetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolRegistryABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolRegistryABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePoolRegistrySwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolRegistryABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolRegistryABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolRegistryABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__.
 */
export function usePoolRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function usePoolRegistryAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function usePoolRegistryExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof poolRegistryABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function usePoolRegistryFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function usePoolRegistryInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function usePoolRegistryPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function usePoolRegistryPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function usePoolRegistryPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function usePoolRegistryPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function usePoolRegistryRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"Swap"`.
 */
export function usePoolRegistrySwapEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function usePoolRegistryTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolRegistryABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function usePoolRegistryTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolRegistryABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolRegistryABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolRegistryABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolTokensABI}__.
 */
export function usePoolTokens(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: poolTokensABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__.
 */
export function usePoolTokensRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolTokensABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    ...config,
  } as UseContractReadConfig<typeof poolTokensABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"WETH"`.
 */
export function usePoolTokensWeth<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof poolTokensABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getActionId"`.
 */
export function usePoolTokensGetActionId<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof poolTokensABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function usePoolTokensGetAuthorizer<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function usePoolTokensGetDomainSeparator<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolTokensABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function usePoolTokensGetInternalBalance<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolTokensABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function usePoolTokensGetNextNonce<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof poolTokensABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getPausedState"`.
 */
export function usePoolTokensGetPausedState<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getPool"`.
 */
export function usePoolTokensGetPool<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof poolTokensABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function usePoolTokensGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolTokensABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function usePoolTokensGetPoolTokens<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof poolTokensABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function usePoolTokensGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof poolTokensABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolTokensABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function usePoolTokensHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof poolTokensABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof poolTokensABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poolTokensABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof poolTokensABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__.
 */
export function usePoolTokensWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof poolTokensABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, TFunctionName>({
    abi: poolTokensABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePoolTokensBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'batchSwap'>({
    abi: poolTokensABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePoolTokensDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof poolTokensABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'deregisterTokens'>({
    abi: poolTokensABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePoolTokensExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'exitPool'>({
    abi: poolTokensABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePoolTokensFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'flashLoan'>({
    abi: poolTokensABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePoolTokensJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'joinPool'>({
    abi: poolTokensABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePoolTokensManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolTokensABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'managePoolBalance'>({
    abi: poolTokensABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePoolTokensManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof poolTokensABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'manageUserBalance'>({
    abi: poolTokensABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePoolTokensQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'queryBatchSwap'>({
    abi: poolTokensABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePoolTokensRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'registerPool'>({
    abi: poolTokensABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePoolTokensRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'registerTokens'>({
    abi: poolTokensABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePoolTokensSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'setAuthorizer'>({
    abi: poolTokensABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePoolTokensSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'setPaused'>({
    abi: poolTokensABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePoolTokensSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof poolTokensABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof poolTokensABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'setRelayerApproval'>({
    abi: poolTokensABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"swap"`.
 */
export function usePoolTokensSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTokensABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof poolTokensABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolTokensABI, 'swap'>({
    abi: poolTokensABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__.
 */
export function usePreparePoolTokensWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePreparePoolTokensBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePreparePoolTokensDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePreparePoolTokensExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePreparePoolTokensFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePreparePoolTokensJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePreparePoolTokensManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePreparePoolTokensManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePreparePoolTokensQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePreparePoolTokensRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePreparePoolTokensRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePreparePoolTokensSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePreparePoolTokensSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePreparePoolTokensSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof poolTokensABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTokensABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePoolTokensSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolTokensABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolTokensABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolTokensABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__.
 */
export function usePoolTokensEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function usePoolTokensAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function usePoolTokensExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function usePoolTokensFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function usePoolTokensInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function usePoolTokensPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function usePoolTokensPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function usePoolTokensPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function usePoolTokensPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function usePoolTokensRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"Swap"`.
 */
export function usePoolTokensSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function usePoolTokensTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTokensABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function usePoolTokensTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof poolTokensABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: poolTokensABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof poolTokensABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link protocolFeesCollectorABI}__.
 */
export function useProtocolFeesCollector(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: protocolFeesCollectorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__.
 */
export function useProtocolFeesCollectorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"getActionId"`.
 */
export function useProtocolFeesCollectorGetActionId<
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    'getActionId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useProtocolFeesCollectorGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"getCollectedFeeAmounts"`.
 */
export function useProtocolFeesCollectorGetCollectedFeeAmounts<
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    'getCollectedFeeAmounts'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'getCollectedFeeAmounts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'getCollectedFeeAmounts',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'getCollectedFeeAmounts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"getFlashLoanFeePercentage"`.
 */
export function useProtocolFeesCollectorGetFlashLoanFeePercentage<
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    'getFlashLoanFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'getFlashLoanFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'getFlashLoanFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'getFlashLoanFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useProtocolFeesCollectorGetSwapFeePercentage<
  TSelectData = ReadContractResult<
    typeof protocolFeesCollectorABI,
    'getSwapFeePercentage'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'getSwapFeePercentage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'getSwapFeePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'getSwapFeePercentage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"vault"`.
 */
export function useProtocolFeesCollectorVault<
  TSelectData = ReadContractResult<typeof protocolFeesCollectorABI, 'vault'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof protocolFeesCollectorABI,
      'vault',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: protocolFeesCollectorABI,
    functionName: 'vault',
    ...config,
  } as UseContractReadConfig<
    typeof protocolFeesCollectorABI,
    'vault',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__.
 */
export function useProtocolFeesCollectorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof protocolFeesCollectorABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof protocolFeesCollectorABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof protocolFeesCollectorABI,
    TFunctionName
  >({ abi: protocolFeesCollectorABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"setFlashLoanFeePercentage"`.
 */
export function useProtocolFeesCollectorSetFlashLoanFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof protocolFeesCollectorABI,
          'setFlashLoanFeePercentage'
        >['abi'],
        'setFlashLoanFeePercentage'
      > & { functionName?: 'setFlashLoanFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof protocolFeesCollectorABI,
        'setFlashLoanFeePercentage'
      > & {
        abi?: never
        functionName?: 'setFlashLoanFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof protocolFeesCollectorABI,
    'setFlashLoanFeePercentage'
  >({
    abi: protocolFeesCollectorABI,
    functionName: 'setFlashLoanFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useProtocolFeesCollectorSetSwapFeePercentage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof protocolFeesCollectorABI,
          'setSwapFeePercentage'
        >['abi'],
        'setSwapFeePercentage'
      > & { functionName?: 'setSwapFeePercentage' }
    : UseContractWriteConfig<
        TMode,
        typeof protocolFeesCollectorABI,
        'setSwapFeePercentage'
      > & {
        abi?: never
        functionName?: 'setSwapFeePercentage'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof protocolFeesCollectorABI,
    'setSwapFeePercentage'
  >({
    abi: protocolFeesCollectorABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"withdrawCollectedFees"`.
 */
export function useProtocolFeesCollectorWithdrawCollectedFees<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof protocolFeesCollectorABI,
          'withdrawCollectedFees'
        >['abi'],
        'withdrawCollectedFees'
      > & { functionName?: 'withdrawCollectedFees' }
    : UseContractWriteConfig<
        TMode,
        typeof protocolFeesCollectorABI,
        'withdrawCollectedFees'
      > & {
        abi?: never
        functionName?: 'withdrawCollectedFees'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof protocolFeesCollectorABI,
    'withdrawCollectedFees'
  >({
    abi: protocolFeesCollectorABI,
    functionName: 'withdrawCollectedFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__.
 */
export function usePrepareProtocolFeesCollectorWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof protocolFeesCollectorABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: protocolFeesCollectorABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof protocolFeesCollectorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"setFlashLoanFeePercentage"`.
 */
export function usePrepareProtocolFeesCollectorSetFlashLoanFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof protocolFeesCollectorABI,
      'setFlashLoanFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: protocolFeesCollectorABI,
    functionName: 'setFlashLoanFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof protocolFeesCollectorABI,
    'setFlashLoanFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareProtocolFeesCollectorSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof protocolFeesCollectorABI,
      'setSwapFeePercentage'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: protocolFeesCollectorABI,
    functionName: 'setSwapFeePercentage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof protocolFeesCollectorABI,
    'setSwapFeePercentage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `functionName` set to `"withdrawCollectedFees"`.
 */
export function usePrepareProtocolFeesCollectorWithdrawCollectedFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof protocolFeesCollectorABI,
      'withdrawCollectedFees'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: protocolFeesCollectorABI,
    functionName: 'withdrawCollectedFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof protocolFeesCollectorABI,
    'withdrawCollectedFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link protocolFeesCollectorABI}__.
 */
export function useProtocolFeesCollectorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof protocolFeesCollectorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: protocolFeesCollectorABI,
    ...config,
  } as UseContractEventConfig<typeof protocolFeesCollectorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `eventName` set to `"FlashLoanFeePercentageChanged"`.
 */
export function useProtocolFeesCollectorFlashLoanFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof protocolFeesCollectorABI,
      'FlashLoanFeePercentageChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: protocolFeesCollectorABI,
    eventName: 'FlashLoanFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<
    typeof protocolFeesCollectorABI,
    'FlashLoanFeePercentageChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link protocolFeesCollectorABI}__ and `eventName` set to `"SwapFeePercentageChanged"`.
 */
export function useProtocolFeesCollectorSwapFeePercentageChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof protocolFeesCollectorABI,
      'SwapFeePercentageChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: protocolFeesCollectorABI,
    eventName: 'SwapFeePercentageChanged',
    ...config,
  } as UseContractEventConfig<
    typeof protocolFeesCollectorABI,
    'SwapFeePercentageChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link recoveryModeABI}__.
 */
export function useRecoveryMode(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: recoveryModeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryModeABI}__.
 */
export function useRecoveryModeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof recoveryModeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryModeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryModeABI,
    ...config,
  } as UseContractReadConfig<
    typeof recoveryModeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"getActionId"`.
 */
export function useRecoveryModeGetActionId<
  TSelectData = ReadContractResult<typeof recoveryModeABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryModeABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryModeABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof recoveryModeABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useRecoveryModeGetAuthorizer<
  TSelectData = ReadContractResult<typeof recoveryModeABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryModeABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryModeABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof recoveryModeABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"getOwner"`.
 */
export function useRecoveryModeGetOwner<
  TSelectData = ReadContractResult<typeof recoveryModeABI, 'getOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryModeABI, 'getOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryModeABI,
    functionName: 'getOwner',
    ...config,
  } as UseContractReadConfig<typeof recoveryModeABI, 'getOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"inRecoveryMode"`.
 */
export function useRecoveryModeInRecoveryMode<
  TSelectData = ReadContractResult<typeof recoveryModeABI, 'inRecoveryMode'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof recoveryModeABI,
      'inRecoveryMode',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryModeABI,
    functionName: 'inRecoveryMode',
    ...config,
  } as UseContractReadConfig<
    typeof recoveryModeABI,
    'inRecoveryMode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryModeABI}__.
 */
export function useRecoveryModeWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryModeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof recoveryModeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryModeABI, TFunctionName>({
    abi: recoveryModeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function useRecoveryModeDisableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof recoveryModeABI,
          'disableRecoveryMode'
        >['abi'],
        'disableRecoveryMode'
      > & { functionName?: 'disableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof recoveryModeABI,
        'disableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'disableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryModeABI, 'disableRecoveryMode'>(
    {
      abi: recoveryModeABI,
      functionName: 'disableRecoveryMode',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function useRecoveryModeEnableRecoveryMode<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof recoveryModeABI,
          'enableRecoveryMode'
        >['abi'],
        'enableRecoveryMode'
      > & { functionName?: 'enableRecoveryMode' }
    : UseContractWriteConfig<
        TMode,
        typeof recoveryModeABI,
        'enableRecoveryMode'
      > & {
        abi?: never
        functionName?: 'enableRecoveryMode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryModeABI, 'enableRecoveryMode'>({
    abi: recoveryModeABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryModeABI}__.
 */
export function usePrepareRecoveryModeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryModeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryModeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryModeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"disableRecoveryMode"`.
 */
export function usePrepareRecoveryModeDisableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof recoveryModeABI,
      'disableRecoveryMode'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryModeABI,
    functionName: 'disableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof recoveryModeABI,
    'disableRecoveryMode'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryModeABI}__ and `functionName` set to `"enableRecoveryMode"`.
 */
export function usePrepareRecoveryModeEnableRecoveryMode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryModeABI, 'enableRecoveryMode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryModeABI,
    functionName: 'enableRecoveryMode',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof recoveryModeABI,
    'enableRecoveryMode'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryModeABI}__.
 */
export function useRecoveryModeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof recoveryModeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryModeABI,
    ...config,
  } as UseContractEventConfig<typeof recoveryModeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryModeABI}__ and `eventName` set to `"RecoveryModeStateChanged"`.
 */
export function useRecoveryModeRecoveryModeStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryModeABI, 'RecoveryModeStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryModeABI,
    eventName: 'RecoveryModeStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof recoveryModeABI,
    'RecoveryModeStateChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariant(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: stdInvariantABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'excludeArtifacts'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'excludeArtifacts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'excludeArtifacts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'excludeContracts'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'excludeContracts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'excludeContracts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'excludeSenders'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'excludeSenders',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'excludeSenders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TSelectData = ReadContractResult<
    typeof stdInvariantABI,
    'targetArtifactSelectors'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'targetArtifactSelectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'targetArtifactSelectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'targetArtifacts'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'targetArtifacts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'targetArtifacts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'targetContracts'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'targetContracts',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'targetContracts',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'targetSelectors'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      'targetSelectors',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'targetSelectors',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TSelectData = ReadContractResult<typeof stdInvariantABI, 'targetSenders'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetSenders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    'targetSenders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link swapsABI}__.
 */
export function useSwaps(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: swapsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__.
 */
export function useSwapsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof swapsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: swapsABI, ...config } as UseContractReadConfig<
    typeof swapsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"WETH"`.
 */
export function useSwapsWeth<
  TSelectData = ReadContractResult<typeof swapsABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getActionId"`.
 */
export function useSwapsGetActionId<
  TSelectData = ReadContractResult<typeof swapsABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useSwapsGetAuthorizer<
  TSelectData = ReadContractResult<typeof swapsABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getAuthorizer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useSwapsGetDomainSeparator<
  TSelectData = ReadContractResult<typeof swapsABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getDomainSeparator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof swapsABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useSwapsGetInternalBalance<
  TSelectData = ReadContractResult<typeof swapsABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getInternalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof swapsABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useSwapsGetNextNonce<
  TSelectData = ReadContractResult<typeof swapsABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useSwapsGetPausedState<
  TSelectData = ReadContractResult<typeof swapsABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getPausedState', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getPool"`.
 */
export function useSwapsGetPool<
  TSelectData = ReadContractResult<typeof swapsABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useSwapsGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof swapsABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getPoolTokenInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getPoolTokenInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useSwapsGetPoolTokens<
  TSelectData = ReadContractResult<typeof swapsABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<typeof swapsABI, 'getPoolTokens', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useSwapsGetProtocolFeesCollector<
  TSelectData = ReadContractResult<typeof swapsABI, 'getProtocolFeesCollector'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof swapsABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof swapsABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useSwapsHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof swapsABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof swapsABI, 'hasApprovedRelayer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapsABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof swapsABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__.
 */
export function useSwapsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof swapsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, TFunctionName>({
    abi: swapsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useSwapsBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'batchSwap'>({
    abi: swapsABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useSwapsDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'deregisterTokens'>['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'deregisterTokens'> & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'deregisterTokens'>({
    abi: swapsABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"exitPool"`.
 */
export function useSwapsExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'exitPool'>({
    abi: swapsABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useSwapsFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'flashLoan'>({
    abi: swapsABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"joinPool"`.
 */
export function useSwapsJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'joinPool'>({
    abi: swapsABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useSwapsManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'managePoolBalance'>['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'managePoolBalance'> & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'managePoolBalance'>({
    abi: swapsABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useSwapsManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'manageUserBalance'>['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'manageUserBalance'> & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'manageUserBalance'>({
    abi: swapsABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useSwapsQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'queryBatchSwap'>['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'queryBatchSwap'>({
    abi: swapsABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"registerPool"`.
 */
export function useSwapsRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'registerPool'>({
    abi: swapsABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useSwapsRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'registerTokens'>['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'registerTokens'>({
    abi: swapsABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useSwapsSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'setAuthorizer'>['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'setAuthorizer'>({
    abi: swapsABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setPaused"`.
 */
export function useSwapsSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'setPaused'>({
    abi: swapsABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useSwapsSetRelayerApproval<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapsABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'setRelayerApproval'> & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'setRelayerApproval'>({
    abi: swapsABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"swap"`.
 */
export function useSwapsSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapsABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof swapsABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapsABI, 'swap'>({
    abi: swapsABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__.
 */
export function usePrepareSwapsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareSwapsBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareSwapsDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareSwapsExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareSwapsFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareSwapsJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareSwapsManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareSwapsManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareSwapsQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareSwapsRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareSwapsRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareSwapsSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareSwapsSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareSwapsSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'setRelayerApproval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapsABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareSwapsSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapsABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapsABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapsABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__.
 */
export function useSwapsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    ...config,
  } as UseContractEventConfig<typeof swapsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useSwapsAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useSwapsExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useSwapsFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useSwapsInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useSwapsPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useSwapsPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useSwapsPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useSwapsPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useSwapsRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"Swap"`.
 */
export function useSwapsSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useSwapsTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link swapsABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useSwapsTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof swapsABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: swapsABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof swapsABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableConstantsABI}__.
 */
export function usePausableConstants(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pausableConstantsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableConstantsABI}__.
 */
export function usePausableConstantsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableConstantsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pausableConstantsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableConstantsABI,
    ...config,
  } as UseContractReadConfig<
    typeof pausableConstantsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableConstantsABI}__ and `functionName` set to `"MAX_BUFFER_PERIOD_DURATION"`.
 */
export function usePausableConstantsMaxBufferPeriodDuration<
  TSelectData = ReadContractResult<
    typeof pausableConstantsABI,
    'MAX_BUFFER_PERIOD_DURATION'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pausableConstantsABI,
      'MAX_BUFFER_PERIOD_DURATION',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableConstantsABI,
    functionName: 'MAX_BUFFER_PERIOD_DURATION',
    ...config,
  } as UseContractReadConfig<
    typeof pausableConstantsABI,
    'MAX_BUFFER_PERIOD_DURATION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableConstantsABI}__ and `functionName` set to `"MAX_PAUSE_WINDOW_DURATION"`.
 */
export function usePausableConstantsMaxPauseWindowDuration<
  TSelectData = ReadContractResult<
    typeof pausableConstantsABI,
    'MAX_PAUSE_WINDOW_DURATION'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pausableConstantsABI,
      'MAX_PAUSE_WINDOW_DURATION',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableConstantsABI,
    functionName: 'MAX_PAUSE_WINDOW_DURATION',
    ...config,
  } as UseContractReadConfig<
    typeof pausableConstantsABI,
    'MAX_PAUSE_WINDOW_DURATION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link temporarilyPausableABI}__.
 */
export function useTemporarilyPausable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: temporarilyPausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link temporarilyPausableABI}__.
 */
export function useTemporarilyPausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof temporarilyPausableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof temporarilyPausableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: temporarilyPausableABI,
    ...config,
  } as UseContractReadConfig<
    typeof temporarilyPausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link temporarilyPausableABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useTemporarilyPausableGetPausedState<
  TSelectData = ReadContractResult<
    typeof temporarilyPausableABI,
    'getPausedState'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof temporarilyPausableABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: temporarilyPausableABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof temporarilyPausableABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link temporarilyPausableABI}__.
 */
export function useTemporarilyPausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof temporarilyPausableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: temporarilyPausableABI,
    ...config,
  } as UseContractEventConfig<typeof temporarilyPausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link temporarilyPausableABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useTemporarilyPausablePausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof temporarilyPausableABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: temporarilyPausableABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof temporarilyPausableABI,
    'PausedStateChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__.
 */
export function useTwoTokenPoolsBalance(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: twoTokenPoolsBalanceABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__.
 */
export function useTwoTokenPoolsBalanceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"WETH"`.
 */
export function useTwoTokenPoolsBalanceWeth<
  TSelectData = ReadContractResult<typeof twoTokenPoolsBalanceABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof twoTokenPoolsBalanceABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'WETH',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getActionId"`.
 */
export function useTwoTokenPoolsBalanceGetActionId<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getActionId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useTwoTokenPoolsBalanceGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useTwoTokenPoolsBalanceGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useTwoTokenPoolsBalanceGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useTwoTokenPoolsBalanceGetNextNonce<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useTwoTokenPoolsBalanceGetPausedState<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getPausedState'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getPool"`.
 */
export function useTwoTokenPoolsBalanceGetPool<
  TSelectData = ReadContractResult<typeof twoTokenPoolsBalanceABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getPool',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getPool',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useTwoTokenPoolsBalanceGetPoolTokenInfo<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getPoolTokenInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useTwoTokenPoolsBalanceGetPoolTokens<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getPoolTokens'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getPoolTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useTwoTokenPoolsBalanceGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useTwoTokenPoolsBalanceHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof twoTokenPoolsBalanceABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof twoTokenPoolsBalanceABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof twoTokenPoolsBalanceABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__.
 */
export function useTwoTokenPoolsBalanceWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, TFunctionName>(
    { abi: twoTokenPoolsBalanceABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useTwoTokenPoolsBalanceBatchSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'batchSwap'
        >['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'batchSwap'
      > & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'batchSwap'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useTwoTokenPoolsBalanceDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'deregisterTokens'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function useTwoTokenPoolsBalanceExitPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'exitPool'
        >['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'exitPool'
      > & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'exitPool'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useTwoTokenPoolsBalanceFlashLoan<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'flashLoan'
        >['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'flashLoan'
      > & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'flashLoan'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function useTwoTokenPoolsBalanceJoinPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'joinPool'
        >['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'joinPool'
      > & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'joinPool'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useTwoTokenPoolsBalanceManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'managePoolBalance'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useTwoTokenPoolsBalanceManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'manageUserBalance'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useTwoTokenPoolsBalanceQueryBatchSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'queryBatchSwap'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function useTwoTokenPoolsBalanceRegisterPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'registerPool'
      > & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'registerPool'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useTwoTokenPoolsBalanceRegisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'registerTokens'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useTwoTokenPoolsBalanceSetAuthorizer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'setAuthorizer'
      > & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'setAuthorizer'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function useTwoTokenPoolsBalanceSetPaused<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'setPaused'
        >['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'setPaused'
      > & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'setPaused'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useTwoTokenPoolsBalanceSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof twoTokenPoolsBalanceABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof twoTokenPoolsBalanceABI,
    'setRelayerApproval'
  >({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function useTwoTokenPoolsBalanceSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof twoTokenPoolsBalanceABI,
          'swap'
        >['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof twoTokenPoolsBalanceABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof twoTokenPoolsBalanceABI, 'swap'>({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__.
 */
export function usePrepareTwoTokenPoolsBalanceWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareTwoTokenPoolsBalanceBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'batchSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareTwoTokenPoolsBalanceDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'deregisterTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareTwoTokenPoolsBalanceExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'exitPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareTwoTokenPoolsBalanceFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'flashLoan'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareTwoTokenPoolsBalanceJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'joinPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareTwoTokenPoolsBalanceManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'managePoolBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareTwoTokenPoolsBalanceManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'manageUserBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareTwoTokenPoolsBalanceQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'queryBatchSwap'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'queryBatchSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareTwoTokenPoolsBalanceRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'registerPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'registerPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareTwoTokenPoolsBalanceRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'registerTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'registerTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareTwoTokenPoolsBalanceSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'setAuthorizer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'setAuthorizer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareTwoTokenPoolsBalanceSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'setPaused'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareTwoTokenPoolsBalanceSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof twoTokenPoolsBalanceABI,
      'setRelayerApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof twoTokenPoolsBalanceABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareTwoTokenPoolsBalanceSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: twoTokenPoolsBalanceABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof twoTokenPoolsBalanceABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__.
 */
export function useTwoTokenPoolsBalanceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    ...config,
  } as UseContractEventConfig<typeof twoTokenPoolsBalanceABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useTwoTokenPoolsBalanceAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'AuthorizerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useTwoTokenPoolsBalanceExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'ExternalBalanceTransfer'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useTwoTokenPoolsBalanceFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useTwoTokenPoolsBalanceInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'InternalBalanceChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'InternalBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useTwoTokenPoolsBalancePausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'PausedStateChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'PausedStateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useTwoTokenPoolsBalancePoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'PoolBalanceChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'PoolBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useTwoTokenPoolsBalancePoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'PoolBalanceManaged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'PoolBalanceManaged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useTwoTokenPoolsBalancePoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useTwoTokenPoolsBalanceRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'RelayerApprovalChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'RelayerApprovalChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"Swap"`.
 */
export function useTwoTokenPoolsBalanceSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useTwoTokenPoolsBalanceTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof twoTokenPoolsBalanceABI,
      'TokensDeregistered'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'TokensDeregistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link twoTokenPoolsBalanceABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useTwoTokenPoolsBalanceTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof twoTokenPoolsBalanceABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: twoTokenPoolsBalanceABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<
    typeof twoTokenPoolsBalanceABI,
    'TokensRegistered'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link userBalanceABI}__.
 */
export function useUserBalance(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: userBalanceABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__.
 */
export function useUserBalanceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof userBalanceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    ...config,
  } as UseContractReadConfig<typeof userBalanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"WETH"`.
 */
export function useUserBalanceWeth<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof userBalanceABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getActionId"`.
 */
export function useUserBalanceGetActionId<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof userBalanceABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useUserBalanceGetAuthorizer<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useUserBalanceGetDomainSeparator<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof userBalanceABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useUserBalanceGetInternalBalance<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof userBalanceABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useUserBalanceGetNextNonce<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useUserBalanceGetPausedState<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getPool"`.
 */
export function useUserBalanceGetPool<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof userBalanceABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useUserBalanceGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof userBalanceABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useUserBalanceGetPoolTokens<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof userBalanceABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useUserBalanceGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof userBalanceABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof userBalanceABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useUserBalanceHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof userBalanceABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof userBalanceABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: userBalanceABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof userBalanceABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__.
 */
export function useUserBalanceWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof userBalanceABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, TFunctionName>({
    abi: userBalanceABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useUserBalanceBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'batchSwap'>({
    abi: userBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useUserBalanceDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof userBalanceABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'deregisterTokens'>({
    abi: userBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function useUserBalanceExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'exitPool'>({
    abi: userBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useUserBalanceFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'flashLoan'>({
    abi: userBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function useUserBalanceJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'joinPool'>({
    abi: userBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useUserBalanceManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof userBalanceABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'managePoolBalance'>({
    abi: userBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useUserBalanceManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof userBalanceABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'manageUserBalance'>({
    abi: userBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useUserBalanceQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'queryBatchSwap'>({
    abi: userBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function useUserBalanceRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'registerPool'>({
    abi: userBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useUserBalanceRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'registerTokens'>({
    abi: userBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useUserBalanceSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'setAuthorizer'>({
    abi: userBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function useUserBalanceSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'setPaused'>({
    abi: userBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useUserBalanceSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof userBalanceABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof userBalanceABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'setRelayerApproval'>({
    abi: userBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function useUserBalanceSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof userBalanceABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof userBalanceABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof userBalanceABI, 'swap'>({
    abi: userBalanceABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__.
 */
export function usePrepareUserBalanceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareUserBalanceBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareUserBalanceDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareUserBalanceExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareUserBalanceFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareUserBalanceJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareUserBalanceManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof userBalanceABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareUserBalanceManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof userBalanceABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareUserBalanceQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareUserBalanceRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareUserBalanceRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareUserBalanceSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareUserBalanceSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareUserBalanceSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof userBalanceABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link userBalanceABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareUserBalanceSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof userBalanceABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: userBalanceABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof userBalanceABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__.
 */
export function useUserBalanceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useUserBalanceAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useUserBalanceExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useUserBalanceFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useUserBalanceInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useUserBalancePausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useUserBalancePoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useUserBalancePoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useUserBalancePoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useUserBalanceRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"Swap"`.
 */
export function useUserBalanceSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useUserBalanceTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link userBalanceABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useUserBalanceTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof userBalanceABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: userBalanceABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof userBalanceABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVault(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vaultABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vaultABI, ...config } as UseContractReadConfig<
    typeof vaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"WETH"`.
 */
export function useVaultWeth<
  TSelectData = ReadContractResult<typeof vaultABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getActionId"`.
 */
export function useVaultGetActionId<
  TSelectData = ReadContractResult<typeof vaultABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getActionId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getActionId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useVaultGetAuthorizer<
  TSelectData = ReadContractResult<typeof vaultABI, 'getAuthorizer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getAuthorizer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getAuthorizer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useVaultGetDomainSeparator<
  TSelectData = ReadContractResult<typeof vaultABI, 'getDomainSeparator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getDomainSeparator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof vaultABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useVaultGetInternalBalance<
  TSelectData = ReadContractResult<typeof vaultABI, 'getInternalBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getInternalBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof vaultABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useVaultGetNextNonce<
  TSelectData = ReadContractResult<typeof vaultABI, 'getNextNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getNextNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getNextNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useVaultGetPausedState<
  TSelectData = ReadContractResult<typeof vaultABI, 'getPausedState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getPausedState', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getPausedState', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getPool"`.
 */
export function useVaultGetPool<
  TSelectData = ReadContractResult<typeof vaultABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getPool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useVaultGetPoolTokenInfo<
  TSelectData = ReadContractResult<typeof vaultABI, 'getPoolTokenInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getPoolTokenInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getPoolTokenInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useVaultGetPoolTokens<
  TSelectData = ReadContractResult<typeof vaultABI, 'getPoolTokens'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'getPoolTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'getPoolTokens', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useVaultGetProtocolFeesCollector<
  TSelectData = ReadContractResult<typeof vaultABI, 'getProtocolFeesCollector'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof vaultABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useVaultHasApprovedRelayer<
  TSelectData = ReadContractResult<typeof vaultABI, 'hasApprovedRelayer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'hasApprovedRelayer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof vaultABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vaultABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, TFunctionName>({
    abi: vaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useVaultBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'batchSwap'>['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'batchSwap'> & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'batchSwap'>({
    abi: vaultABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useVaultDeregisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'deregisterTokens'>['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'deregisterTokens'> & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'deregisterTokens'>({
    abi: vaultABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"exitPool"`.
 */
export function useVaultExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'exitPool'>['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'exitPool'> & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'exitPool'>({
    abi: vaultABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useVaultFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'flashLoan'>['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'flashLoan'> & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'flashLoan'>({
    abi: vaultABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"joinPool"`.
 */
export function useVaultJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'joinPool'>['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'joinPool'> & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'joinPool'>({
    abi: vaultABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useVaultManagePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'managePoolBalance'>['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'managePoolBalance'> & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'managePoolBalance'>({
    abi: vaultABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useVaultManageUserBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'manageUserBalance'>['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'manageUserBalance'> & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'manageUserBalance'>({
    abi: vaultABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useVaultQueryBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'queryBatchSwap'>['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'queryBatchSwap'> & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'queryBatchSwap'>({
    abi: vaultABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"registerPool"`.
 */
export function useVaultRegisterPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'registerPool'>['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'registerPool'> & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'registerPool'>({
    abi: vaultABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useVaultRegisterTokens<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'registerTokens'>['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'registerTokens'> & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'registerTokens'>({
    abi: vaultABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useVaultSetAuthorizer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'setAuthorizer'>['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'setAuthorizer'> & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'setAuthorizer'>({
    abi: vaultABI,
    functionName: 'setAuthorizer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setPaused"`.
 */
export function useVaultSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'setPaused'>['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'setPaused'> & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'setPaused'>({
    abi: vaultABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useVaultSetRelayerApproval<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'setRelayerApproval'> & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'setRelayerApproval'>({
    abi: vaultABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"swap"`.
 */
export function useVaultSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'swap'>({
    abi: vaultABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__.
 */
export function usePrepareVaultWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareVaultBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareVaultDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'deregisterTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'deregisterTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareVaultExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareVaultFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareVaultJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareVaultManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'managePoolBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'managePoolBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareVaultManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'manageUserBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'manageUserBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareVaultQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'queryBatchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'queryBatchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareVaultRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'registerPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareVaultRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'registerTokens'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'registerTokens'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareVaultSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'setAuthorizer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'setAuthorizer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareVaultSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareVaultSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'setRelayerApproval'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'setRelayerApproval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareVaultSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    ...config,
  } as UseContractEventConfig<typeof vaultABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useVaultAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'AuthorizerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useVaultExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'ExternalBalanceTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'ExternalBalanceTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useVaultFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useVaultInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'InternalBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'InternalBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useVaultPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'PausedStateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useVaultPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'PoolBalanceChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useVaultPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'PoolBalanceManaged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useVaultPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useVaultRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'RelayerApprovalChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'RelayerApprovalChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"Swap"`.
 */
export function useVaultSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useVaultTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'TokensDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useVaultTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'TokensRegistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vaultAuthorizationABI}__.
 */
export function useVaultAuthorization(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: vaultAuthorizationABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__.
 */
export function useVaultAuthorizationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vaultAuthorizationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"WETH"`.
 */
export function useVaultAuthorizationWeth<
  TSelectData = ReadContractResult<typeof vaultAuthorizationABI, 'WETH'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultAuthorizationABI, 'WETH', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'WETH',
    ...config,
  } as UseContractReadConfig<typeof vaultAuthorizationABI, 'WETH', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getActionId"`.
 */
export function useVaultAuthorizationGetActionId<
  TSelectData = ReadContractResult<typeof vaultAuthorizationABI, 'getActionId'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getActionId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getActionId',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getActionId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getAuthorizer"`.
 */
export function useVaultAuthorizationGetAuthorizer<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getAuthorizer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getAuthorizer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getAuthorizer',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getAuthorizer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getDomainSeparator"`.
 */
export function useVaultAuthorizationGetDomainSeparator<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getDomainSeparator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getDomainSeparator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getDomainSeparator',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getDomainSeparator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getInternalBalance"`.
 */
export function useVaultAuthorizationGetInternalBalance<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getInternalBalance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getInternalBalance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getInternalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getInternalBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getNextNonce"`.
 */
export function useVaultAuthorizationGetNextNonce<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getNextNonce'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getNextNonce',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getNextNonce',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getNextNonce',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getPausedState"`.
 */
export function useVaultAuthorizationGetPausedState<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getPausedState'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getPausedState',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getPausedState',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getPausedState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getPool"`.
 */
export function useVaultAuthorizationGetPool<
  TSelectData = ReadContractResult<typeof vaultAuthorizationABI, 'getPool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultAuthorizationABI, 'getPool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getPool',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getPoolTokenInfo"`.
 */
export function useVaultAuthorizationGetPoolTokenInfo<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getPoolTokenInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getPoolTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getPoolTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getPoolTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useVaultAuthorizationGetPoolTokens<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getPoolTokens'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getPoolTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getPoolTokens',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getPoolTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"getProtocolFeesCollector"`.
 */
export function useVaultAuthorizationGetProtocolFeesCollector<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'getProtocolFeesCollector'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'getProtocolFeesCollector',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'getProtocolFeesCollector',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'getProtocolFeesCollector',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"hasApprovedRelayer"`.
 */
export function useVaultAuthorizationHasApprovedRelayer<
  TSelectData = ReadContractResult<
    typeof vaultAuthorizationABI,
    'hasApprovedRelayer'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vaultAuthorizationABI,
      'hasApprovedRelayer',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultAuthorizationABI,
    functionName: 'hasApprovedRelayer',
    ...config,
  } as UseContractReadConfig<
    typeof vaultAuthorizationABI,
    'hasApprovedRelayer',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__.
 */
export function useVaultAuthorizationWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultAuthorizationABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, TFunctionName>({
    abi: vaultAuthorizationABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"batchSwap"`.
 */
export function useVaultAuthorizationBatchSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'batchSwap'
        >['abi'],
        'batchSwap'
      > & { functionName?: 'batchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'batchSwap'
      > & {
        abi?: never
        functionName?: 'batchSwap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'batchSwap'>({
    abi: vaultAuthorizationABI,
    functionName: 'batchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function useVaultAuthorizationDeregisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'deregisterTokens'
        >['abi'],
        'deregisterTokens'
      > & { functionName?: 'deregisterTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'deregisterTokens'
      > & {
        abi?: never
        functionName?: 'deregisterTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'deregisterTokens'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'deregisterTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"exitPool"`.
 */
export function useVaultAuthorizationExitPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'exitPool'
        >['abi'],
        'exitPool'
      > & { functionName?: 'exitPool' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'exitPool'
      > & {
        abi?: never
        functionName?: 'exitPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'exitPool'>({
    abi: vaultAuthorizationABI,
    functionName: 'exitPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"flashLoan"`.
 */
export function useVaultAuthorizationFlashLoan<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'flashLoan'
        >['abi'],
        'flashLoan'
      > & { functionName?: 'flashLoan' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'flashLoan'
      > & {
        abi?: never
        functionName?: 'flashLoan'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'flashLoan'>({
    abi: vaultAuthorizationABI,
    functionName: 'flashLoan',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"joinPool"`.
 */
export function useVaultAuthorizationJoinPool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'joinPool'
        >['abi'],
        'joinPool'
      > & { functionName?: 'joinPool' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'joinPool'
      > & {
        abi?: never
        functionName?: 'joinPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'joinPool'>({
    abi: vaultAuthorizationABI,
    functionName: 'joinPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function useVaultAuthorizationManagePoolBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'managePoolBalance'
        >['abi'],
        'managePoolBalance'
      > & { functionName?: 'managePoolBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'managePoolBalance'
      > & {
        abi?: never
        functionName?: 'managePoolBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'managePoolBalance'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'managePoolBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function useVaultAuthorizationManageUserBalance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'manageUserBalance'
        >['abi'],
        'manageUserBalance'
      > & { functionName?: 'manageUserBalance' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'manageUserBalance'
      > & {
        abi?: never
        functionName?: 'manageUserBalance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'manageUserBalance'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'manageUserBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function useVaultAuthorizationQueryBatchSwap<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'queryBatchSwap'
        >['abi'],
        'queryBatchSwap'
      > & { functionName?: 'queryBatchSwap' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'queryBatchSwap'
      > & {
        abi?: never
        functionName?: 'queryBatchSwap'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'queryBatchSwap'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"registerPool"`.
 */
export function useVaultAuthorizationRegisterPool<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'registerPool'
        >['abi'],
        'registerPool'
      > & { functionName?: 'registerPool' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'registerPool'
      > & {
        abi?: never
        functionName?: 'registerPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'registerPool'>({
    abi: vaultAuthorizationABI,
    functionName: 'registerPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"registerTokens"`.
 */
export function useVaultAuthorizationRegisterTokens<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'registerTokens'
        >['abi'],
        'registerTokens'
      > & { functionName?: 'registerTokens' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'registerTokens'
      > & {
        abi?: never
        functionName?: 'registerTokens'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'registerTokens'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'registerTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function useVaultAuthorizationSetAuthorizer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'setAuthorizer'
        >['abi'],
        'setAuthorizer'
      > & { functionName?: 'setAuthorizer' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'setAuthorizer'
      > & {
        abi?: never
        functionName?: 'setAuthorizer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'setAuthorizer'>(
    {
      abi: vaultAuthorizationABI,
      functionName: 'setAuthorizer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setPaused"`.
 */
export function useVaultAuthorizationSetPaused<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'setPaused'
        >['abi'],
        'setPaused'
      > & { functionName?: 'setPaused' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'setPaused'
      > & {
        abi?: never
        functionName?: 'setPaused'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'setPaused'>({
    abi: vaultAuthorizationABI,
    functionName: 'setPaused',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function useVaultAuthorizationSetRelayerApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vaultAuthorizationABI,
          'setRelayerApproval'
        >['abi'],
        'setRelayerApproval'
      > & { functionName?: 'setRelayerApproval' }
    : UseContractWriteConfig<
        TMode,
        typeof vaultAuthorizationABI,
        'setRelayerApproval'
      > & {
        abi?: never
        functionName?: 'setRelayerApproval'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof vaultAuthorizationABI,
    'setRelayerApproval'
  >({
    abi: vaultAuthorizationABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"swap"`.
 */
export function useVaultAuthorizationSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultAuthorizationABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof vaultAuthorizationABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultAuthorizationABI, 'swap'>({
    abi: vaultAuthorizationABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__.
 */
export function usePrepareVaultAuthorizationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"batchSwap"`.
 */
export function usePrepareVaultAuthorizationBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'batchSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'batchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'batchSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"deregisterTokens"`.
 */
export function usePrepareVaultAuthorizationDeregisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'deregisterTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'deregisterTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'deregisterTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"exitPool"`.
 */
export function usePrepareVaultAuthorizationExitPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'exitPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'exitPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'exitPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"flashLoan"`.
 */
export function usePrepareVaultAuthorizationFlashLoan(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'flashLoan'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'flashLoan',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'flashLoan'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"joinPool"`.
 */
export function usePrepareVaultAuthorizationJoinPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'joinPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'joinPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'joinPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"managePoolBalance"`.
 */
export function usePrepareVaultAuthorizationManagePoolBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'managePoolBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'managePoolBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'managePoolBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"manageUserBalance"`.
 */
export function usePrepareVaultAuthorizationManageUserBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'manageUserBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'manageUserBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'manageUserBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"queryBatchSwap"`.
 */
export function usePrepareVaultAuthorizationQueryBatchSwap(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'queryBatchSwap'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'queryBatchSwap',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'queryBatchSwap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"registerPool"`.
 */
export function usePrepareVaultAuthorizationRegisterPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'registerPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'registerPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'registerPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"registerTokens"`.
 */
export function usePrepareVaultAuthorizationRegisterTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'registerTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'registerTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'registerTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setAuthorizer"`.
 */
export function usePrepareVaultAuthorizationSetAuthorizer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'setAuthorizer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'setAuthorizer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'setAuthorizer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setPaused"`.
 */
export function usePrepareVaultAuthorizationSetPaused(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'setPaused'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'setPaused',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'setPaused'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"setRelayerApproval"`.
 */
export function usePrepareVaultAuthorizationSetRelayerApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vaultAuthorizationABI,
      'setRelayerApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'setRelayerApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vaultAuthorizationABI,
    'setRelayerApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareVaultAuthorizationSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultAuthorizationABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultAuthorizationABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__.
 */
export function useVaultAuthorizationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    ...config,
  } as UseContractEventConfig<typeof vaultAuthorizationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"AuthorizerChanged"`.
 */
export function useVaultAuthorizationAuthorizerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'AuthorizerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'AuthorizerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'AuthorizerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"ExternalBalanceTransfer"`.
 */
export function useVaultAuthorizationExternalBalanceTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof vaultAuthorizationABI,
      'ExternalBalanceTransfer'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'ExternalBalanceTransfer',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'ExternalBalanceTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"FlashLoan"`.
 */
export function useVaultAuthorizationFlashLoanEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'FlashLoan'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'FlashLoan',
    ...config,
  } as UseContractEventConfig<typeof vaultAuthorizationABI, 'FlashLoan'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"InternalBalanceChanged"`.
 */
export function useVaultAuthorizationInternalBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof vaultAuthorizationABI,
      'InternalBalanceChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'InternalBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'InternalBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"PausedStateChanged"`.
 */
export function useVaultAuthorizationPausedStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'PausedStateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'PausedStateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'PausedStateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"PoolBalanceChanged"`.
 */
export function useVaultAuthorizationPoolBalanceChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'PoolBalanceChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'PoolBalanceChanged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'PoolBalanceChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"PoolBalanceManaged"`.
 */
export function useVaultAuthorizationPoolBalanceManagedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'PoolBalanceManaged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'PoolBalanceManaged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'PoolBalanceManaged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"PoolRegistered"`.
 */
export function useVaultAuthorizationPoolRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'PoolRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'PoolRegistered',
    ...config,
  } as UseContractEventConfig<typeof vaultAuthorizationABI, 'PoolRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"RelayerApprovalChanged"`.
 */
export function useVaultAuthorizationRelayerApprovalChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof vaultAuthorizationABI,
      'RelayerApprovalChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'RelayerApprovalChanged',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'RelayerApprovalChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"Swap"`.
 */
export function useVaultAuthorizationSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof vaultAuthorizationABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"TokensDeregistered"`.
 */
export function useVaultAuthorizationTokensDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'TokensDeregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'TokensDeregistered',
    ...config,
  } as UseContractEventConfig<
    typeof vaultAuthorizationABI,
    'TokensDeregistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultAuthorizationABI}__ and `eventName` set to `"TokensRegistered"`.
 */
export function useVaultAuthorizationTokensRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultAuthorizationABI, 'TokensRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultAuthorizationABI,
    eventName: 'TokensRegistered',
    ...config,
  } as UseContractEventConfig<typeof vaultAuthorizationABI, 'TokensRegistered'>)
}
